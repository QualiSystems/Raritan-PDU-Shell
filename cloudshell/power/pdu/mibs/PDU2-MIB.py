#
# PySNMP MIB module PDU2-MIB (http://pysnmp.sf.net)
# ASN.1 source file://\Users\nahum-t\Documents\libsmi-0.4.3-win32\smi\mibs\PDU2-MIB
# Produced by pysmi-0.0.6 at Tue Jun 28 18:47:55 2016
# On host ? platform ? version ? by user ?
# Using Python version 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)]
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( InetAddress, InetPortNumber, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
( NotificationGroup, ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
( sysName, sysLocation, sysContact, ) = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysLocation", "sysContact")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, TimeTicks, Counter64, Unsigned32, enterprises, ModuleIdentity, Gauge32, iso, ObjectIdentity, IpAddress, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Counter32")
( DisplayString, MacAddress, TruthValue, TextualConvention, RowPointer, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "TextualConvention", "RowPointer")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742)).setRevisions(("2015-02-18 00:00", "2014-06-04 00:00", "2014-01-09 00:00", "2014-01-07 00:00", "2013-11-21 00:00", "2013-09-18 00:00", "2013-08-01 00:00", "2013-07-10 00:00", "2013-07-02 00:00", "2013-05-21 00:00", "2013-04-26 00:00", "2013-03-27 00:00", "2013-03-25 10:00", "2013-03-25 00:00", "2013-03-18 00:00", "2013-02-25 00:00", "2013-02-04 00:00", "2013-01-24 00:00", "2012-11-20 00:00", "2012-11-15 00:00", "2012-10-05 00:00", "2012-10-04 00:00", "2012-09-28 00:00", "2012-09-21 00:00", "2012-09-20 00:00", "2012-09-17 00:00", "2012-09-04 00:00", "2012-06-22 00:00", "2012-06-18 00:00", "2012-06-06 00:00", "2012-05-25 00:00", "2012-05-15 00:00", "2012-03-26 00:00", "2011-12-13 00:00", "2011-11-29 00:00", "2011-10-25 00:00", "2011-06-16 00:00", "2011-03-22 00:00", "2011-02-21 00:00", "2011-02-14 00:00", "2011-02-08 00:00", "2011-02-03 00:00", "2011-01-31 00:00", "2010-12-15 00:00", "2010-12-13 11:31", "2010-12-13 00:00", "2010-12-07 00:00", "2010-10-07 00:00", "2010-10-04 00:00", "2010-09-01 00:00", "2010-08-05 00:00", "2010-07-23 00:00", "2010-07-22 00:00", "2010-07-21 00:00", "2010-07-14 00:00", "2010-07-06 00:00", "2010-07-01 00:00", "2010-06-30 00:00", "2010-06-21 00:00", "2010-06-03 00:00", "2010-05-27 00:00", "2010-05-24 00:00", "2010-04-19 00:00", "2010-04-15 00:00", "2010-04-08 00:00", "2010-03-29 00:00", "2010-03-25 00:00", "2010-03-16 00:00", "2010-03-01 00:00", "2010-01-29 00:00",))
pdu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0))
trapInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 2))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4))
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9))
reliability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2))
inlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3))
overCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5))
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6))
serverReachability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7))
wires = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8))
transferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9))
outletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1))
externalSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 2))
transferSwitchControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3))
actuatorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4))
rcmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5))
inletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6))
outletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7))
unitSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8))
measurementsUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1))
measurementsInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2))
measurementsOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3))
measurementsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4))
measurementsExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5))
measurementsWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6))
measurementsTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7))
logUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1))
logInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2))
logOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3))
logOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4))
logExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5))
logWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6))
logTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7))
reliabilityData = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1))
reliabilityErrorLog = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2))
complianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 2)).setObjects(*(("PDU2-MIB", "configGroup"), ("PDU2-MIB", "logGroup"), ("PDU2-MIB", "measurementsGroup"), ("PDU2-MIB", "controlGroup"), ("PDU2-MIB", "trapInformationGroup"), ("PDU2-MIB", "trapsGroup"), ("PDU2-MIB", "reliabilityGroup"),))
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 1)).setObjects(*(("PDU2-MIB", "ipAddressGroup"), ("PDU2-MIB", "oldConfigGroup"), ("PDU2-MIB", "oldLogGroup"), ("PDU2-MIB", "oldMeasurementsGroup"), ("PDU2-MIB", "oldTrapsGroup"),))
configGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 1)).setObjects(*(("PDU2-MIB", "pduCount"), ("PDU2-MIB", "pduManufacturer"), ("PDU2-MIB", "pduModel"), ("PDU2-MIB", "pduSerialNumber"), ("PDU2-MIB", "pduRatedVoltage"), ("PDU2-MIB", "pduRatedCurrent"), ("PDU2-MIB", "pduRatedFrequency"), ("PDU2-MIB", "pduRatedVA"), ("PDU2-MIB", "pduImage"), ("PDU2-MIB", "inletCount"), ("PDU2-MIB", "transferSwitchCount"), ("PDU2-MIB", "productType"), ("PDU2-MIB", "overCurrentProtectorCount"), ("PDU2-MIB", "outletCount"), ("PDU2-MIB", "inletControllerCount"), ("PDU2-MIB", "outletControllerCount"), ("PDU2-MIB", "meteringControllerCount"), ("PDU2-MIB", "externalSensorCount"), ("PDU2-MIB", "pxMACAddress"), ("PDU2-MIB", "utcOffset"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "boardVersion"), ("PDU2-MIB", "boardFirmwareVersion"), ("PDU2-MIB", "boardFirmwareTimeStamp"), ("PDU2-MIB", "unitSensorLogAvailable"), ("PDU2-MIB", "unitSensorUnits"), ("PDU2-MIB", "unitSensorDecimalDigits"), ("PDU2-MIB", "unitSensorResolution"), ("PDU2-MIB", "unitSensorMaximum"), ("PDU2-MIB", "unitSensorMinimum"), ("PDU2-MIB", "unitSensorHysteresis"), ("PDU2-MIB", "unitSensorStateChangeDelay"), ("PDU2-MIB", "unitSensorLowerCriticalThreshold"), ("PDU2-MIB", "unitSensorLowerWarningThreshold"), ("PDU2-MIB", "unitSensorUpperCriticalThreshold"), ("PDU2-MIB", "unitSensorUpperWarningThreshold"), ("PDU2-MIB", "unitSensorEnabledThresholds"), ("PDU2-MIB", "unitSensorSignedMaximum"), ("PDU2-MIB", "unitSensorSignedMinimum"), ("PDU2-MIB", "unitSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "unitSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "unitSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "unitSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "inletName"), ("PDU2-MIB", "inletPlug"), ("PDU2-MIB", "inletPoleCount"), ("PDU2-MIB", "inletRatedVoltage"), ("PDU2-MIB", "inletRatedCurrent"), ("PDU2-MIB", "inletDeviceCapabilities"), ("PDU2-MIB", "inletPoleCapabilities"), ("PDU2-MIB", "inletPlugDescriptor"), ("PDU2-MIB", "inletEnableState"), ("PDU2-MIB", "inletSensorLogAvailable"), ("PDU2-MIB", "inletSensorUnits"), ("PDU2-MIB", "inletSensorDecimalDigits"), ("PDU2-MIB", "inletSensorResolution"), ("PDU2-MIB", "inletSensorMaximum"), ("PDU2-MIB", "inletSensorMinimum"), ("PDU2-MIB", "inletSensorHysteresis"), ("PDU2-MIB", "inletSensorStateChangeDelay"), ("PDU2-MIB", "inletSensorLowerCriticalThreshold"), ("PDU2-MIB", "inletSensorLowerWarningThreshold"), ("PDU2-MIB", "inletSensorUpperCriticalThreshold"), ("PDU2-MIB", "inletSensorUpperWarningThreshold"), ("PDU2-MIB", "inletSensorEnabledThresholds"), ("PDU2-MIB", "inletSensorSignedMaximum"), ("PDU2-MIB", "inletSensorSignedMinimum"), ("PDU2-MIB", "inletSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "inletSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "inletSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "inletSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorLogAvailable"), ("PDU2-MIB", "inletPoleSensorUnits"), ("PDU2-MIB", "inletPoleSensorDecimalDigits"), ("PDU2-MIB", "inletPoleSensorResolution"), ("PDU2-MIB", "inletPoleSensorMaximum"), ("PDU2-MIB", "inletPoleSensorMinimum"), ("PDU2-MIB", "inletPoleSensorHysteresis"), ("PDU2-MIB", "inletPoleSensorStateChangeDelay"), ("PDU2-MIB", "inletPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "inletPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorEnabledThresholds"), ("PDU2-MIB", "inletPoleSensorSignedMaximum"), ("PDU2-MIB", "inletPoleSensorSignedMinimum"), ("PDU2-MIB", "inletPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "inletPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletRCMResidualOperatingCurrent"), ("PDU2-MIB", "overCurrentProtectorLabel"), ("PDU2-MIB", "overCurrentProtectorName"), ("PDU2-MIB", "overCurrentProtectorType"), ("PDU2-MIB", "overCurrentProtectorRatedCurrent"), ("PDU2-MIB", "overCurrentProtectorCapabilities"), ("PDU2-MIB", "overCurrentProtectorSensorLogAvailable"), ("PDU2-MIB", "overCurrentProtectorSensorUnits"), ("PDU2-MIB", "overCurrentProtectorSensorDecimalDigits"), ("PDU2-MIB", "overCurrentProtectorSensorResolution"), ("PDU2-MIB", "overCurrentProtectorSensorMaximum"), ("PDU2-MIB", "overCurrentProtectorSensorMinimum"), ("PDU2-MIB", "overCurrentProtectorSensorHysteresis"), ("PDU2-MIB", "overCurrentProtectorSensorStateChangeDelay"), ("PDU2-MIB", "overCurrentProtectorSensorLowerCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorLowerWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorEnabledThresholds"), ("PDU2-MIB", "overCurrentProtectorSensorSignedMaximum"), ("PDU2-MIB", "overCurrentProtectorSensorSignedMinimum"), ("PDU2-MIB", "overCurrentProtectorSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorPowerSource"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "outletName"), ("PDU2-MIB", "outletReceptacle"), ("PDU2-MIB", "outletPoleCount"), ("PDU2-MIB", "outletRatedVoltage"), ("PDU2-MIB", "outletRatedCurrent"), ("PDU2-MIB", "outletRatedVA"), ("PDU2-MIB", "outletDeviceCapabilities"), ("PDU2-MIB", "outletPoleCapabilities"), ("PDU2-MIB", "outletPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "outletStateOnStartup"), ("PDU2-MIB", "outletUseGlobalPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "outletSwitchable"), ("PDU2-MIB", "outletReceptacleDescriptor"), ("PDU2-MIB", "outletNonCritical"), ("PDU2-MIB", "outletSequenceDelay"), ("PDU2-MIB", "outletSensorLogAvailable"), ("PDU2-MIB", "outletSensorUnits"), ("PDU2-MIB", "outletSensorDecimalDigits"), ("PDU2-MIB", "outletSensorResolution"), ("PDU2-MIB", "outletSensorMaximum"), ("PDU2-MIB", "outletSensorMinimum"), ("PDU2-MIB", "outletSensorHysteresis"), ("PDU2-MIB", "outletSensorStateChangeDelay"), ("PDU2-MIB", "outletSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletSensorLowerWarningThreshold"), ("PDU2-MIB", "outletSensorUpperCriticalThreshold"), ("PDU2-MIB", "outletSensorUpperWarningThreshold"), ("PDU2-MIB", "outletSensorEnabledThresholds"), ("PDU2-MIB", "outletSensorSignedMaximum"), ("PDU2-MIB", "outletSensorSignedMinimum"), ("PDU2-MIB", "outletSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "outletSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "outletSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "outletPoleSensorLogAvailable"), ("PDU2-MIB", "outletPoleSensorUnits"), ("PDU2-MIB", "outletPoleSensorDecimalDigits"), ("PDU2-MIB", "outletPoleSensorResolution"), ("PDU2-MIB", "outletPoleSensorMaximum"), ("PDU2-MIB", "outletPoleSensorMinimum"), ("PDU2-MIB", "outletPoleSensorHysteresis"), ("PDU2-MIB", "outletPoleSensorStateChangeDelay"), ("PDU2-MIB", "outletPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "outletPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "outletPoleSensorEnabledThresholds"), ("PDU2-MIB", "outletPoleSensorSignedMaximum"), ("PDU2-MIB", "outletPoleSensorSignedMinimum"), ("PDU2-MIB", "outletPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "outletPowerSource"), ("PDU2-MIB", "externalSensorType"), ("PDU2-MIB", "externalSensorSerialNumber"), ("PDU2-MIB", "externalSensorName"), ("PDU2-MIB", "externalSensorDescription"), ("PDU2-MIB", "externalSensorXCoordinate"), ("PDU2-MIB", "externalSensorYCoordinate"), ("PDU2-MIB", "externalSensorZCoordinate"), ("PDU2-MIB", "externalSensorChannelNumber"), ("PDU2-MIB", "externalOnOffSensorSubtype"), ("PDU2-MIB", "externalSensorLogAvailable"), ("PDU2-MIB", "externalSensorUnits"), ("PDU2-MIB", "externalSensorDecimalDigits"), ("PDU2-MIB", "externalSensorResolution"), ("PDU2-MIB", "externalSensorMaximum"), ("PDU2-MIB", "externalSensorMinimum"), ("PDU2-MIB", "externalSensorHysteresis"), ("PDU2-MIB", "externalSensorStateChangeDelay"), ("PDU2-MIB", "externalSensorLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorLowerWarningThreshold"), ("PDU2-MIB", "externalSensorUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorUpperWarningThreshold"), ("PDU2-MIB", "externalSensorEnabledThresholds"), ("PDU2-MIB", "externalSensorsZCoordinateUnits"), ("PDU2-MIB", "externalSensorIsActuator"), ("PDU2-MIB", "externalSensorPosition"), ("PDU2-MIB", "externalSensorUseDefaultThresholds"), ("PDU2-MIB", "externalSensorTypeDefaultHysteresis"), ("PDU2-MIB", "externalSensorTypeDefaultStateChangeDelay"), ("PDU2-MIB", "externalSensorTypeDefaultLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultLowerWarningThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultUpperWarningThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultEnabledThresholds"), ("PDU2-MIB", "measurementPeriod"), ("PDU2-MIB", "measurementsPerLogEntry"), ("PDU2-MIB", "logSize"), ("PDU2-MIB", "unitDeviceCapabilities"), ("PDU2-MIB", "globalOutletPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "globalOutletStateOnStartup"), ("PDU2-MIB", "relayBehaviorOnPowerLoss"), ("PDU2-MIB", "pduPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "pduDaisychainMemberType"), ("PDU2-MIB", "managedExternalSensorCount"), ("PDU2-MIB", "outletPowerupSequence"), ("PDU2-MIB", "loadShedding"), ("PDU2-MIB", "serverCount"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "serverPingEnabled"), ("PDU2-MIB", "inrushGuardDelay"), ("PDU2-MIB", "cascadedDeviceConnected"), ("PDU2-MIB", "synchronizeWithNTPServer"), ("PDU2-MIB", "useDHCPProvidedNTPServer"), ("PDU2-MIB", "firstNTPServerAddressType"), ("PDU2-MIB", "firstNTPServerAddress"), ("PDU2-MIB", "secondNTPServerAddressType"), ("PDU2-MIB", "secondNTPServerAddress"), ("PDU2-MIB", "transferSwitchLabel"), ("PDU2-MIB", "transferSwitchName"), ("PDU2-MIB", "transferSwitchPreferredInlet"), ("PDU2-MIB", "transferSwitchAutoReTransferEnabled"), ("PDU2-MIB", "transferSwitchAutoReTransferWaitTime"), ("PDU2-MIB", "transferSwitchAutoReTransferRequiresPhaseSync"), ("PDU2-MIB", "transferSwitchFrontPanelManualTransferButtonEnabled"), ("PDU2-MIB", "transferSwitchCapabilities"), ("PDU2-MIB", "transferSwitchSensorLogAvailable"), ("PDU2-MIB", "transferSwitchSensorUnits"), ("PDU2-MIB", "transferSwitchSensorDecimalDigits"), ("PDU2-MIB", "transferSwitchSensorResolution"), ("PDU2-MIB", "transferSwitchSensorMaximum"), ("PDU2-MIB", "transferSwitchSensorMinimum"), ("PDU2-MIB", "transferSwitchSensorHysteresis"), ("PDU2-MIB", "transferSwitchSensorStateChangeDelay"), ("PDU2-MIB", "transferSwitchSensorLowerCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorLowerWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorUpperCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorEnabledThresholds"), ("PDU2-MIB", "transferSwitchSensorSignedMaximum"), ("PDU2-MIB", "transferSwitchSensorSignedMinimum"), ("PDU2-MIB", "transferSwitchSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchPowerSource1"), ("PDU2-MIB", "transferSwitchPowerSource2"), ("PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("PDU2-MIB", "peripheralDevicePackageModel"), ("PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("PDU2-MIB", "peripheralDevicePackageMinFirmwareVersion"), ("PDU2-MIB", "peripheralDevicePackageFirmwareTimeStamp"), ("PDU2-MIB", "peripheralDevicePackagePosition"), ("PDU2-MIB", "peripheralDevicePackageState"), ("PDU2-MIB", "deviceCascadeType"), ("PDU2-MIB", "deviceCascadePosition"), ("PDU2-MIB", "peripheralDevicesAutoManagement"), ("PDU2-MIB", "externalSensorAlarmedToNormalDelay"), ("PDU2-MIB", "frontPanelOutletSwitching"), ("PDU2-MIB", "frontPanelRCMSelfTest"), ("PDU2-MIB", "frontPanelActuatorControl"),))
ipAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 12)).setObjects(*(("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "netmask"), ("PDU2-MIB", "gateway"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetNetmask"), ("PDU2-MIB", "pxInetGateway"),))
oldConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 13)).setObjects(*(("PDU2-MIB", "outletSequencingDelay"), ("PDU2-MIB", "unitSensorAccuracy"), ("PDU2-MIB", "unitSensorTolerance"), ("PDU2-MIB", "inletSensorAccuracy"), ("PDU2-MIB", "inletSensorTolerance"), ("PDU2-MIB", "inletPoleSensorAccuracy"), ("PDU2-MIB", "inletPoleSensorTolerance"), ("PDU2-MIB", "outletSensorAccuracy"), ("PDU2-MIB", "outletSensorTolerance"), ("PDU2-MIB", "outletPoleSensorAccuracy"), ("PDU2-MIB", "outletPoleSensorTolerance"), ("PDU2-MIB", "overCurrentProtectorSensorAccuracy"), ("PDU2-MIB", "overCurrentProtectorSensorTolerance"), ("PDU2-MIB", "externalSensorAccuracy"), ("PDU2-MIB", "externalSensorTolerance"), ("PDU2-MIB", "wireSensorAccuracy"), ("PDU2-MIB", "wireSensorTolerance"), ("PDU2-MIB", "transferSwitchSensorAccuracy"), ("PDU2-MIB", "transferSwitchSensorTolerance"), ("PDU2-MIB", "wireCount"), ("PDU2-MIB", "wireLabel"), ("PDU2-MIB", "wireCapabilities"), ("PDU2-MIB", "wireSensorLogAvailable"), ("PDU2-MIB", "wireSensorUnits"), ("PDU2-MIB", "wireSensorDecimalDigits"), ("PDU2-MIB", "wireSensorResolution"), ("PDU2-MIB", "wireSensorMaximum"), ("PDU2-MIB", "wireSensorMinimum"), ("PDU2-MIB", "wireSensorHysteresis"), ("PDU2-MIB", "wireSensorStateChangeDelay"), ("PDU2-MIB", "wireSensorLowerCriticalThreshold"), ("PDU2-MIB", "wireSensorLowerWarningThreshold"), ("PDU2-MIB", "wireSensorUpperCriticalThreshold"), ("PDU2-MIB", "wireSensorUpperWarningThreshold"), ("PDU2-MIB", "wireSensorEnabledThresholds"), ("PDU2-MIB", "wirePowerSource"), ("PDU2-MIB", "inletRatedFrequency"), ("PDU2-MIB", "inletRatedVA"),))
logGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 2)).setObjects(*(("PDU2-MIB", "dataLogging"), ("PDU2-MIB", "oldestLogID"), ("PDU2-MIB", "newestLogID"), ("PDU2-MIB", "logTimeStamp"), ("PDU2-MIB", "dataLoggingEnableForAllSensors"), ("PDU2-MIB", "logUnitSensorDataAvailable"), ("PDU2-MIB", "logUnitSensorState"), ("PDU2-MIB", "logUnitSensorAvgValue"), ("PDU2-MIB", "logUnitSensorMaxValue"), ("PDU2-MIB", "logUnitSensorMinValue"), ("PDU2-MIB", "logUnitSensorSignedAvgValue"), ("PDU2-MIB", "logUnitSensorSignedMaxValue"), ("PDU2-MIB", "logUnitSensorSignedMinValue"), ("PDU2-MIB", "logInletSensorDataAvailable"), ("PDU2-MIB", "logInletSensorState"), ("PDU2-MIB", "logInletSensorAvgValue"), ("PDU2-MIB", "logInletSensorMaxValue"), ("PDU2-MIB", "logInletSensorMinValue"), ("PDU2-MIB", "logInletSensorSignedAvgValue"), ("PDU2-MIB", "logInletSensorSignedMaxValue"), ("PDU2-MIB", "logInletSensorSignedMinValue"), ("PDU2-MIB", "logInletPoleSensorDataAvailable"), ("PDU2-MIB", "logInletPoleSensorState"), ("PDU2-MIB", "logInletPoleSensorAvgValue"), ("PDU2-MIB", "logInletPoleSensorMaxValue"), ("PDU2-MIB", "logInletPoleSensorMinValue"), ("PDU2-MIB", "logInletPoleSensorSignedAvgValue"), ("PDU2-MIB", "logInletPoleSensorSignedMaxValue"), ("PDU2-MIB", "logInletPoleSensorSignedMinValue"), ("PDU2-MIB", "logOutletSensorDataAvailable"), ("PDU2-MIB", "logOutletSensorState"), ("PDU2-MIB", "logOutletSensorAvgValue"), ("PDU2-MIB", "logOutletSensorMaxValue"), ("PDU2-MIB", "logOutletSensorMinValue"), ("PDU2-MIB", "logOutletSensorSignedAvgValue"), ("PDU2-MIB", "logOutletSensorSignedMaxValue"), ("PDU2-MIB", "logOutletSensorSignedMinValue"), ("PDU2-MIB", "logOutletPoleSensorDataAvailable"), ("PDU2-MIB", "logOutletPoleSensorState"), ("PDU2-MIB", "logOutletPoleSensorAvgValue"), ("PDU2-MIB", "logOutletPoleSensorMaxValue"), ("PDU2-MIB", "logOutletPoleSensorMinValue"), ("PDU2-MIB", "logOutletPoleSensorSignedAvgValue"), ("PDU2-MIB", "logOutletPoleSensorSignedMaxValue"), ("PDU2-MIB", "logOutletPoleSensorSignedMinValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorDataAvailable"), ("PDU2-MIB", "logOverCurrentProtectorSensorState"), ("PDU2-MIB", "logOverCurrentProtectorSensorAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorMaxValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorMinValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedMaxValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedMinValue"), ("PDU2-MIB", "logExternalSensorDataAvailable"), ("PDU2-MIB", "logExternalSensorState"), ("PDU2-MIB", "logExternalSensorAvgValue"), ("PDU2-MIB", "logExternalSensorMaxValue"), ("PDU2-MIB", "logExternalSensorMinValue"), ("PDU2-MIB", "logTransferSwitchSensorDataAvailable"), ("PDU2-MIB", "logTransferSwitchSensorState"), ("PDU2-MIB", "logTransferSwitchSensorAvgValue"), ("PDU2-MIB", "logTransferSwitchSensorMaxValue"), ("PDU2-MIB", "logTransferSwitchSensorMinValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedAvgValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedMaxValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedMinValue"),))
oldLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 14)).setObjects(*(("PDU2-MIB", "logWireSensorDataAvailable"), ("PDU2-MIB", "logWireSensorState"), ("PDU2-MIB", "logWireSensorAvgValue"), ("PDU2-MIB", "logWireSensorMaxValue"), ("PDU2-MIB", "logWireSensorMinValue"),))
measurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 3)).setObjects(*(("PDU2-MIB", "measurementsUnitSensorIsAvailable"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "measurementsInletSensorIsAvailable"), ("PDU2-MIB", "measurementsInletSensorState"), ("PDU2-MIB", "measurementsInletSensorValue"), ("PDU2-MIB", "measurementsInletSensorTimeStamp"), ("PDU2-MIB", "measurementsInletSensorSignedValue"), ("PDU2-MIB", "measurementsInletPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsInletPoleSensorState"), ("PDU2-MIB", "measurementsInletPoleSensorValue"), ("PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("PDU2-MIB", "measurementsOutletSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "measurementsOutletSensorValue"), ("PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletSensorSignedValue"), ("PDU2-MIB", "measurementsOutletPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletPoleSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorValue"), ("PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorIsAvailable"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("PDU2-MIB", "measurementsExternalSensorIsAvailable"), ("PDU2-MIB", "measurementsExternalSensorState"), ("PDU2-MIB", "measurementsExternalSensorValue"), ("PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorIsAvailable"), ("PDU2-MIB", "measurementsTransferSwitchSensorState"), ("PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"),))
oldMeasurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 15)).setObjects(*(("PDU2-MIB", "measurementsWireSensorIsAvailable"), ("PDU2-MIB", "measurementsWireSensorState"), ("PDU2-MIB", "measurementsWireSensorValue"), ("PDU2-MIB", "measurementsWireSensorTimeStamp"),))
controlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 4)).setObjects(*(("PDU2-MIB", "switchingOperation"), ("PDU2-MIB", "outletSwitchingState"), ("PDU2-MIB", "outletSwitchingTimeStamp"), ("PDU2-MIB", "transferSwitchActiveInlet"), ("PDU2-MIB", "transferSwitchTransferToInlet"), ("PDU2-MIB", "transferSwitchAlarmOverride"), ("PDU2-MIB", "transferSwitchLastTransferReason"), ("PDU2-MIB", "actuatorState"), ("PDU2-MIB", "rcmState"), ("PDU2-MIB", "inletSensorResetValue"), ("PDU2-MIB", "outletSensorResetValue"), ("PDU2-MIB", "unitSensorResetValue"),))
trapInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 5)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "inletPoleNumber"), ("PDU2-MIB", "outletPoleNumber"), ("PDU2-MIB", "externalSensorNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "smtpMessageRecipients"), ("PDU2-MIB", "smtpServer"), ("PDU2-MIB", "errorDescription"), ("PDU2-MIB", "deviceChangedParameter"), ("PDU2-MIB", "changedParameterNewValue"), ("PDU2-MIB", "lhxSupportEnabled"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDeviceRomcode"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdateState"),))
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 9)).setObjects(*(("PDU2-MIB", "systemStarted"), ("PDU2-MIB", "systemReset"), ("PDU2-MIB", "userLogin"), ("PDU2-MIB", "userLogout"), ("PDU2-MIB", "userAuthenticationFailure"), ("PDU2-MIB", "userSessionTimeout"), ("PDU2-MIB", "userAdded"), ("PDU2-MIB", "userModified"), ("PDU2-MIB", "userDeleted"), ("PDU2-MIB", "roleAdded"), ("PDU2-MIB", "roleModified"), ("PDU2-MIB", "roleDeleted"), ("PDU2-MIB", "deviceUpdateStarted"), ("PDU2-MIB", "deviceUpdateCompleted"), ("PDU2-MIB", "userBlocked"), ("PDU2-MIB", "powerControl"), ("PDU2-MIB", "userPasswordChanged"), ("PDU2-MIB", "passwordSettingsChanged"), ("PDU2-MIB", "firmwareValidationFailed"), ("PDU2-MIB", "logFileCleared"), ("PDU2-MIB", "bulkConfigurationSaved"), ("PDU2-MIB", "bulkConfigurationCopied"), ("PDU2-MIB", "inletSensorStateChange"), ("PDU2-MIB", "inletPoleSensorStateChange"), ("PDU2-MIB", "outletSensorStateChange"), ("PDU2-MIB", "outletPoleSensorStateChange"), ("PDU2-MIB", "overCurrentProtectorSensorStateChange"), ("PDU2-MIB", "externalSensorStateChange"), ("PDU2-MIB", "smtpMessageTransmissionFailure"), ("PDU2-MIB", "ldapError"), ("PDU2-MIB", "deviceUpdateFailed"), ("PDU2-MIB", "loadSheddingModeEntered"), ("PDU2-MIB", "loadSheddingModeExited"), ("PDU2-MIB", "pingServerEnabled"), ("PDU2-MIB", "pingServerDisabled"), ("PDU2-MIB", "serverNotReachable"), ("PDU2-MIB", "serverReachable"), ("PDU2-MIB", "rfCodeTagConnected"), ("PDU2-MIB", "rfCodeTagDisconnected"), ("PDU2-MIB", "deviceIdentificationChanged"), ("PDU2-MIB", "usbSlaveConnected"), ("PDU2-MIB", "usbSlaveDisconnected"), ("PDU2-MIB", "lhxSupportChanged"), ("PDU2-MIB", "userAcceptedRestrictedServiceAgreement"), ("PDU2-MIB", "userDeclinedRestrictedServiceAgreement"), ("PDU2-MIB", "transferSwitchSensorStateChange"), ("PDU2-MIB", "deviceSettingsSaved"), ("PDU2-MIB", "deviceSettingsRestored"), ("PDU2-MIB", "webcamInserted"), ("PDU2-MIB", "webcamRemoved"), ("PDU2-MIB", "inletEnabled"), ("PDU2-MIB", "inletDisabled"), ("PDU2-MIB", "serverConnectivityUnrecoverable"), ("PDU2-MIB", "radiusError"), ("PDU2-MIB", "serverReachabilityError"), ("PDU2-MIB", "inletSensorReset"), ("PDU2-MIB", "outletSensorReset"), ("PDU2-MIB", "unitSensorReset"), ("PDU2-MIB", "unknownPeripheralDeviceAttached"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdate"), ("PDU2-MIB", "unitSensorStateChange"),))
oldTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 16)).setObjects(*(("PDU2-MIB", "wireSensorStateChange"), ("PDU2-MIB", "pduSensorStateChange"),))
reliabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 10)).setObjects(*(("PDU2-MIB", "reliabilityId"), ("PDU2-MIB", "reliabilityDataValue"), ("PDU2-MIB", "reliabilityDataMaxPossible"), ("PDU2-MIB", "reliabilityDataWorstValue"), ("PDU2-MIB", "reliabilityDataThreshold"), ("PDU2-MIB", "reliabilityDataRawUpperBytes"), ("PDU2-MIB", "reliabilityDataRawLowerBytes"), ("PDU2-MIB", "reliabilityDataFlags"), ("PDU2-MIB", "reliabilityErrorLogId"), ("PDU2-MIB", "reliabilityErrorLogValue"), ("PDU2-MIB", "reliabilityErrorLogThreshold"), ("PDU2-MIB", "reliabilityErrorLogRawUpperBytes"), ("PDU2-MIB", "reliabilityErrorLogRawLowerBytes"), ("PDU2-MIB", "reliabilityErrorLogPOH"), ("PDU2-MIB", "reliabilityErrorLogTime"), ("PDU2-MIB", "reliabilityDataTableSequenceNumber"),))
class SensorTypeEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,)
    namedValues = NamedValues(("rmsCurrent", 1), ("peakCurrent", 2), ("unbalancedCurrent", 3), ("rmsVoltage", 4), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("contact", 20), ("fanSpeed", 21), ("surgeProtectorStatus", 22), ("frequency", 23), ("phaseAngle", 24), ("rmsVoltageLN", 25), ("residualCurrent", 26), ("rcmState", 27), ("absoluteHumidity", 28), ("other", 30), ("none", 31), ("powerQuality", 32), ("overloadStatus", 33), ("overheatStatus", 34), ("fanStatus", 37), ("inletPhaseSyncAngle", 38), ("inletPhaseSync", 39), ("operatingState", 40), ("activeInlet", 41), ("illuminance", 42), ("doorContact", 43), ("tamperDetection", 44), ("motionDetection", 45), ("i1smpsStatus", 46), ("i2smpsStatus", 47), ("switchStatus", 48),)

class SensorStateEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,)
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11), ("ok", 12), ("fail", 14), ("yes", 15), ("no", 16), ("standby", 17), ("one", 18), ("two", 19), ("inSync", 20), ("outOfSync", 21), ("i1OpenFault", 22), ("i1ShortFault", 23), ("i2OpenFault", 24), ("i2ShortFault", 25), ("fault", 26), ("warning", 27), ("critical", 28), ("selfTest", 29), ("nonRedundant", 30),)

class PlugTypeEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,)
    namedValues = NamedValues(("plugOTHER", -1), ("plugNONE", 0), ("plug56P320", 1), ("plug56P520", 2), ("plug56P532", 3), ("plugCS8365C", 4), ("plugIEC320C14", 5), ("plugIEC320C20", 6), ("plugIEC603093WIRE250V16A", 7), ("plugIEC603093WIRE250V20A", 8), ("plugIEC603093WIRE250V30A", 9), ("plugIEC603093WIRE250V32A", 10), ("plugIEC603093WIRE250V60A", 11), ("plugIEC603093WIRE250V63A", 12), ("plugIEC603093WIRE250V100A", 13), ("plugIEC603093WIRE250V125A", 14), ("plugIEC603094WIRE250V20A", 15), ("plugIEC603094WIRE250V30A", 16), ("plugIEC603094WIRE250V60A", 17), ("plugIEC603094WIRE250V100A", 18), ("plugIEC603095WIRE208V20A", 23), ("plugIEC603095WIRE208V30A", 24), ("plugIEC603095WIRE208V60A", 25), ("plugIEC603095WIRE208V100A", 26), ("plugIEC603095WIRE415V16A", 27), ("plugIEC603095WIRE415V32A", 28), ("plugIEC603095WIRE415V63A", 29), ("plugIEC603095WIRE415V125A", 30), ("plugIEC603095WIRE480V20A", 31), ("plugIEC603095WIRE480V30A", 32), ("plugIEC603095WIRE480V60A", 33), ("plugIEC603095WIRE480V100A", 34), ("plugNEMA515P", 35), ("plugNEMAL515P", 36), ("plugNEMA520P", 37), ("plugNEMAL520P", 38), ("plugNEMAL530P", 39), ("plugNEMAL615P", 40), ("plugNEMAL620P", 41), ("plugNEMAL630P", 42), ("plugNEMAL1520P", 43), ("plugNEMAL1530P", 44), ("plugNEMAL2120P", 45), ("plugNEMAL2130P", 46), ("plugNEMAL2230P", 47), ("plug56P320F", 48), ("plug56PA320", 49),)

class ReceptacleTypeEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(-1, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,)
    namedValues = NamedValues(("receptacleOTHER", -1), ("receptacleNONE", 0), ("receptacleBS1363", 1), ("receptacle56P532", 3), ("receptacleCS8364C", 4), ("receptacleIEC320C13", 5), ("receptacleIEC320C19", 6), ("receptacleIEC603093WIRE250V16A", 7), ("receptacleIEC603093WIRE250V20A", 8), ("receptacleIEC603093WIRE250V30A", 9), ("receptacleIEC603093WIRE250V32A", 10), ("receptacleIEC603093WIRE250V60A", 11), ("receptacleIEC603093WIRE250V63A", 12), ("receptacleIEC603093WIRE250V100A", 13), ("receptacleIEC603093WIRE250V125A", 14), ("receptacleIEC603094WIRE250V20A", 15), ("receptacleIEC603094WIRE250V30A", 16), ("receptacleIEC603094WIRE250V60A", 17), ("receptacleIEC603094WIRE250V100A", 18), ("receptacleIEC603095WIRE208V20A", 23), ("receptacleIEC603095WIRE208V30A", 24), ("receptacleIEC603095WIRE208V60A", 25), ("receptacleIEC603095WIRE208V100A", 26), ("receptacleIEC603095WIRE415V16A", 27), ("receptacleIEC603095WIRE415V32A", 28), ("receptacleIEC603095WIRE415V63A", 29), ("receptacleIEC603095WIRE415V125A", 30), ("receptacleIEC603095WIRE480V20A", 31), ("receptacleIEC603095WIRE480V30A", 32), ("receptacleIEC603095WIRE480V60A", 33), ("receptacleIEC603095WIRE480V100A", 34), ("receptacleNEMA515R", 35), ("receptacleNEMAL515R", 36), ("receptacleNEMA520R", 37), ("receptacleNEMAL520R", 38), ("receptacleNEMAL530R", 39), ("receptacleNEMAL615R", 40), ("receptacleNEMAL620R", 41), ("receptacleNEMAL630R", 42), ("receptacleNEMAL1520R", 43), ("receptacleNEMAL1530R", 44), ("receptacleNEMAL2120RP", 45), ("receptacleNEMAL2130R", 46), ("receptacleSCHUKOTYPEE", 47), ("receptacleSCHUKOTYPEF", 48),)

class OverCurrentProtectorTypeEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)
    namedValues = NamedValues(("ocpBREAKER1POLE", 1), ("ocpBREAKER2POLE", 2), ("ocpBREAKER3POLE", 3), ("ocpFUSE", 4), ("ocpFUSEPAIR", 5), ("ocpRCBO2POLE", 6), ("ocpRCBO3POLE", 7), ("ocpRCBO4POLE", 8),)

class BoardTypeEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4,)
    namedValues = NamedValues(("mainController", 1), ("inletController", 2), ("outletController", 3), ("meteringController", 4),)

class OutletSwitchingOperationsEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2,)
    namedValues = NamedValues(("off", 0), ("on", 1), ("cycle", 2),)

class SensorUnitsEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,)
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18), ("rpm", 19), ("degrees", 20), ("lux", 21), ("grampercubicmeter", 22),)

class DaisychainMemberTypeEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2,)
    namedValues = NamedValues(("standalone", 0), ("master", 1), ("slave", 2),)

class URL(OctetString, TextualConvention):
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)

class GlobalOutletStateOnStartupEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2,)
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2),)

class OutletStateOnStartupEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3,)
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2), ("globalOutletStateOnStartup", 3),)

class ExternalSensorsZCoordinateUnitsEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1,)
    namedValues = NamedValues(("rackUnits", 0), ("text", 1),)

class HundredthsOfAPercentage(Unsigned32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,10000)

class DeviceIdentificationParameterEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3,)
    namedValues = NamedValues(("pduName", 0), ("sysContact", 1), ("sysName", 2), ("sysLocation", 3),)

class TransferSwitchTransferReasonEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8,)
    namedValues = NamedValues(("unknown", 0), ("startup", 1), ("manualTransfer", 2), ("automaticReTransfer", 3), ("powerFailure", 4), ("powerQuality", 5), ("overloadAlarm", 6), ("overheatAlarm", 7), ("internalFailure", 8),)

class ProductTypeEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2,)
    namedValues = NamedValues(("rackPdu", 0), ("bcm", 1), ("transferSwitch", 2),)

class RelayPowerLossBehaviorEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1,)
    namedValues = NamedValues(("nonLatching", 0), ("latching", 1),)

class DeviceCascadeTypeEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1,)
    namedValues = NamedValues(("bridging", 0), ("portForwarding", 1),)

class PeripheralDeviceFirmwareUpdateStateEnumeration(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3,)
    namedValues = NamedValues(("started", 1), ("successful", 2), ("failed", 3),)

pduCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 3, 1), Integer32()).setMaxAccess("readonly")
nameplateTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1), )
nameplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
pduId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
pduManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
pduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
pduRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
pduRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
pduRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
pduRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
pduImage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 9), URL()).setMaxAccess("readonly")
unitConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2), )
unitConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
inletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256))).setMaxAccess("readonly")
overCurrentProtectorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
outletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256))).setMaxAccess("readonly")
inletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
outletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
externalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
pxIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
pxMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
utcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
externalSensorsZCoordinateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 34), ExternalSensorsZCoordinateUnitsEnumeration()).setMaxAccess("readwrite")
unitDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 35), Bits().clone(namedValues=NamedValues(("i1smpsStatus", 45), ("i2smpsStatus", 46),))).setMaxAccess("readonly")
outletSequencingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 36), Unsigned32()).setMaxAccess("readwrite")
globalOutletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 37), Unsigned32()).setMaxAccess("readwrite")
globalOutletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 38), GlobalOutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
outletPowerupSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 39), DisplayString()).setMaxAccess("readwrite")
pduPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 40), Unsigned32()).setMaxAccess("readwrite")
pduDaisychainMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 41), DaisychainMemberTypeEnumeration()).setMaxAccess("readonly")
managedExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
pxInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 50), InetAddressType()).setMaxAccess("readonly")
pxInetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 51), InetAddress()).setMaxAccess("readonly")
pxInetNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 52), InetAddress()).setMaxAccess("readonly")
pxInetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 53), InetAddress()).setMaxAccess("readonly")
loadShedding = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
serverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
inrushGuardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 57), Unsigned32()).setMaxAccess("readwrite")
cascadedDeviceConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 58), TruthValue()).setMaxAccess("readonly")
synchronizeWithNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 59), TruthValue()).setMaxAccess("readwrite")
useDHCPProvidedNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 60), TruthValue()).setMaxAccess("readwrite")
firstNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 61), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
firstNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 62), InetAddress()).setMaxAccess("readwrite")
secondNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 63), InetAddressType()).setMaxAccess("readwrite")
secondNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 64), InetAddress()).setMaxAccess("readwrite")
wireCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
transferSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 67), ProductTypeEnumeration()).setMaxAccess("readonly")
meteringControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
relayBehaviorOnPowerLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 69), RelayPowerLossBehaviorEnumeration()).setMaxAccess("readwrite")
deviceCascadeType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 70), DeviceCascadeTypeEnumeration()).setMaxAccess("readwrite")
deviceCascadePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,99))).setMaxAccess("readonly")
peripheralDevicesAutoManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 72), TruthValue()).setMaxAccess("readwrite")
frontPanelOutletSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 73), TruthValue()).setMaxAccess("readwrite")
frontPanelRCMSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 74), TruthValue()).setMaxAccess("readwrite")
frontPanelActuatorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 75), TruthValue()).setMaxAccess("readwrite")
controllerConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3), )
controllerConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "boardType"), (0, "PDU2-MIB", "boardIndex"))
boardType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 1), BoardTypeEnumeration())
boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
boardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
boardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
boardFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
logConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4), )
logConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
dataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
measurementPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
measurementsPerLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
logSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
dataLoggingEnableForAllSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
trapInformationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1), )
trapInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
targetUser = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
roleName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
smtpMessageRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
smtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 2), SensorStateEnumeration()).setMaxAccess("accessiblefornotify")
pduNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256))).setMaxAccess("accessiblefornotify")
inletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256))).setMaxAccess("accessiblefornotify")
outletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256))).setMaxAccess("accessiblefornotify")
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256))).setMaxAccess("accessiblefornotify")
typeOfSensor = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 10), SensorTypeEnumeration()).setMaxAccess("accessiblefornotify")
errorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 11), DisplayString()).setMaxAccess("accessiblefornotify")
deviceChangedParameter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 12), DeviceIdentificationParameterEnumeration()).setMaxAccess("accessiblefornotify")
changedParameterNewValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 13), DisplayString()).setMaxAccess("accessiblefornotify")
lhxSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 14), TruthValue()).setMaxAccess("accessiblefornotify")
webcamModel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 15), DisplayString()).setMaxAccess("accessiblefornotify")
webcamConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 16), DisplayString()).setMaxAccess("accessiblefornotify")
agentInetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 18), InetPortNumber()).setMaxAccess("accessiblefornotify")
peripheralDeviceRomcode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 19), DisplayString()).setMaxAccess("accessiblefornotify")
peripheralDeviceFirmwareUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 20), PeripheralDeviceFirmwareUpdateStateEnumeration()).setMaxAccess("accessiblefornotify")
unitSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5), )
unitSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 1), SensorTypeEnumeration())
unitSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
unitSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
unitSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
unitSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
unitSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
unitSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
unitSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
unitSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
unitSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
unitSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
unitSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 21), Unsigned32()).setMaxAccess("readwrite")
unitSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 22), Unsigned32()).setMaxAccess("readwrite")
unitSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 23), Unsigned32()).setMaxAccess("readwrite")
unitSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 24), Unsigned32()).setMaxAccess("readwrite")
unitSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
unitSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 26), Integer32()).setMaxAccess("readonly")
unitSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 27), Integer32()).setMaxAccess("readonly")
unitSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 28), Integer32()).setMaxAccess("readwrite")
unitSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 29), Integer32()).setMaxAccess("readwrite")
unitSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 30), Integer32()).setMaxAccess("readwrite")
unitSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 31), Integer32()).setMaxAccess("readwrite")
inletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3), )
inletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"))
inletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
inletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
inletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
inletPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 4), PlugTypeEnumeration()).setMaxAccess("readonly")
inletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2,4))).setMaxAccess("readonly")
inletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
inletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
inletRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
inletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
inletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 10), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("surgeProtectorStatus", 21), ("frequency", 22), ("phaseAngle", 23), ("residualCurrent", 25), ("rcmState", 26), ("powerQuality", 31),))).setMaxAccess("readonly")
inletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 11), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("rmsVoltageLN", 24),))).setMaxAccess("readonly")
inletPlugDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
inletEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
inletRCMResidualOperatingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
inletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4), )
inletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
inletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
inletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
inletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
inletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
inletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
inletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
inletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
inletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
inletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
inletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
inletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
inletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
inletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
inletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
inletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
inletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 26), Integer32()).setMaxAccess("readonly")
inletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 27), Integer32()).setMaxAccess("readonly")
inletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
inletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
inletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
inletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
inletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6), )
inletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
inletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
inletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
inletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
inletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
inletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
inletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
inletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
inletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
inletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
inletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
inletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
inletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
inletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
inletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
inletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
inletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
inletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 26), Integer32()).setMaxAccess("readonly")
inletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 27), Integer32()).setMaxAccess("readonly")
inletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
inletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
inletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
inletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
overCurrentProtectorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3), )
overCurrentProtectorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"))
overCurrentProtectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
overCurrentProtectorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
overCurrentProtectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
overCurrentProtectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 4), OverCurrentProtectorTypeEnumeration()).setMaxAccess("readonly")
overCurrentProtectorRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
overCurrentProtectorCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 9), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("trip", 14),))).setMaxAccess("readonly")
overCurrentProtectorPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 10), RowPointer()).setMaxAccess("readonly")
overCurrentProtectorSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4), )
overCurrentProtectorSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"))
overCurrentProtectorSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
overCurrentProtectorSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
overCurrentProtectorSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
overCurrentProtectorSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
overCurrentProtectorSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
overCurrentProtectorSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
overCurrentProtectorSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
overCurrentProtectorSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
overCurrentProtectorSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
overCurrentProtectorSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
overCurrentProtectorSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
overCurrentProtectorSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
overCurrentProtectorSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
overCurrentProtectorSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
overCurrentProtectorSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
overCurrentProtectorSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 26), Integer32()).setMaxAccess("readonly")
overCurrentProtectorSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 27), Integer32()).setMaxAccess("readonly")
overCurrentProtectorSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
overCurrentProtectorSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
overCurrentProtectorSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
overCurrentProtectorSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
outletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3), )
outletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"))
outletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
outletReceptacle = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 4), ReceptacleTypeEnumeration()).setMaxAccess("readonly")
outletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2,4))).setMaxAccess("readonly")
outletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
outletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
outletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
outletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 10), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("onOff", 13), ("frequency", 22), ("phaseAngle", 23),))).setMaxAccess("readonly")
outletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 11), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("rmsVoltageLN", 24),))).setMaxAccess("readonly")
outletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
outletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 13), OutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
outletUseGlobalPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
outletSwitchable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 28), TruthValue()).setMaxAccess("readonly")
outletReceptacleDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
outletNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
outletSequenceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
outletPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 33), RowPointer()).setMaxAccess("readonly")
outletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4), )
outletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
outletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
outletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
outletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
outletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
outletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
outletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
outletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
outletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
outletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
outletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
outletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
outletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
outletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
outletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
outletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
outletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 26), Integer32()).setMaxAccess("readonly")
outletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
outletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
outletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
outletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
outletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
outletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6), )
outletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
outletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
outletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
outletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
outletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
outletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
outletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
outletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
outletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
outletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
outletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
outletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
outletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
outletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
outletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
outletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
outletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
outletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 26), Integer32()).setMaxAccess("readonly")
outletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 27), Integer32()).setMaxAccess("readonly")
outletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
outletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
outletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
outletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
externalSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3), )
externalSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 2), SensorTypeEnumeration()).setMaxAccess("readonly")
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
externalSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
externalOnOffSensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 10), SensorTypeEnumeration()).setMaxAccess("readwrite")
externalSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 16), SensorUnitsEnumeration()).setMaxAccess("readonly")
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
externalSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 18), HundredthsOfAPercentage()).setMaxAccess("readonly")
externalSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
externalSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
externalSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 21), Integer32()).setMaxAccess("readonly")
externalSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 22), Integer32()).setMaxAccess("readonly")
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
externalSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
externalSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 35), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
externalSensorIsActuator = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
externalSensorPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 37), DisplayString()).setMaxAccess("readonly")
externalSensorUseDefaultThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 38), TruthValue()).setMaxAccess("readwrite")
externalSensorAlarmedToNormalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 39), Integer32()).setMaxAccess("readwrite")
externalSensorTypeDefaultThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4), )
externalSensorTypeDefaultThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
externalSensorTypeDefaultHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
externalSensorTypeDefaultStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
externalSensorTypeDefaultLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
externalSensorTypeDefaultLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
externalSensorTypeDefaultUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
externalSensorTypeDefaultUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
externalSensorTypeDefaultEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 9), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
serverReachabilityTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3), )
serverReachabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "serverID"))
serverID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
serverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
serverPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
wireConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3), )
wireConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"))
wireId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
wireLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
wireCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 3), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8),))).setMaxAccess("readonly")
wirePowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 4), RowPointer()).setMaxAccess("readonly")
wireSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4), )
wireSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"))
wireSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
wireSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
wireSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
wireSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
wireSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
wireSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
wireSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
wireSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
wireSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
wireSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
wireSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
wireSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
wireSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
wireSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
wireSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
transferSwitchConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3), )
transferSwitchConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"))
transferSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
transferSwitchLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
transferSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
transferSwitchPreferredInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,64))).setMaxAccess("readonly")
transferSwitchAutoReTransferEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
transferSwitchAutoReTransferWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
transferSwitchAutoReTransferRequiresPhaseSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
transferSwitchFrontPanelManualTransferButtonEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 23), TruthValue()).setMaxAccess("readwrite")
transferSwitchCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 24), Bits().clone(namedValues=NamedValues(("overloadStatus", 32), ("inletPhaseSyncAngle", 37), ("inletPhaseSync", 38), ("operatingState", 39), ("activeInlet", 40), ("switchStatus", 47),))).setMaxAccess("readonly")
transferSwitchPowerSource1 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 31), RowPointer()).setMaxAccess("readonly")
transferSwitchPowerSource2 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 32), RowPointer()).setMaxAccess("readonly")
transferSwitchSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4), )
transferSwitchSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"))
transferSwitchSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
transferSwitchSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
transferSwitchSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
transferSwitchSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
transferSwitchSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
transferSwitchSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
transferSwitchSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
transferSwitchSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
transferSwitchSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
transferSwitchSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
transferSwitchSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
transferSwitchSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
transferSwitchSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
transferSwitchSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
transferSwitchSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3),))).setMaxAccess("readwrite")
transferSwitchSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 26), Integer32()).setMaxAccess("readonly")
transferSwitchSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 27), Integer32()).setMaxAccess("readonly")
transferSwitchSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
transferSwitchSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
transferSwitchSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
transferSwitchSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
peripheralDevicePackageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5), )
peripheralDevicePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "peripheralDevicePackageId"))
peripheralDevicePackageId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
peripheralDevicePackageSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
peripheralDevicePackageModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
peripheralDevicePackageFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
peripheralDevicePackageMinFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
peripheralDevicePackageFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
peripheralDevicePackagePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
peripheralDevicePackageState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
logIndexTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1), )
logIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
oldestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
newestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
logTimeStampTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2), )
logTimeStampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "logIndex"))
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256)))
logTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
unitSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3), )
unitSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
logUnitSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
logUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logUnitSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
logUnitSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
logUnitSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
logUnitSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
logUnitSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
logUnitSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
inletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3), )
inletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
logInletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
logInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logInletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
logInletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
logInletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
logInletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
logInletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
logInletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
inletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4), )
inletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
logInletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
logInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logInletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
logInletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
logInletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
logInletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
logInletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
logInletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
outletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3), )
outletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
logOutletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
logOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logOutletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
logOutletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
logOutletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
logOutletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
logOutletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
logOutletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
outletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4), )
outletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
logOutletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
logOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logOutletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
logOutletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
logOutletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
logOutletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
logOutletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
logOutletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
overCurrentProtectorSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3), )
overCurrentProtectorSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
logOverCurrentProtectorSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
logOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logOverCurrentProtectorSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
logOverCurrentProtectorSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
logOverCurrentProtectorSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
logOverCurrentProtectorSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
logOverCurrentProtectorSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
logOverCurrentProtectorSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
externalSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3), )
externalSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"), (0, "PDU2-MIB", "logIndex"))
logExternalSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
logExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logExternalSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
logExternalSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
logExternalSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
wireSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3), )
wireSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
logWireSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
logWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logWireSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
logWireSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
logWireSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
transferSwitchSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3), )
transferSwitchSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
logTransferSwitchSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
logTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
logTransferSwitchSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
logTransferSwitchSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
logTransferSwitchSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
logTransferSwitchSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
logTransferSwitchSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
logTransferSwitchSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
unitSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3), )
unitSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
measurementsUnitSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsUnitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
measurementsUnitSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
measurementsUnitSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
inletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3), )
inletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
measurementsInletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsInletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
measurementsInletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
measurementsInletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
inletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4), )
inletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
measurementsInletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsInletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
measurementsInletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
measurementsInletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
outletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3), )
outletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
measurementsOutletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsOutletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
measurementsOutletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
measurementsOutletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
outletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4), )
outletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
measurementsOutletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsOutletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
measurementsOutletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
measurementsOutletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
overCurrentProtectorSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3), )
overCurrentProtectorSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"))
measurementsOverCurrentProtectorSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsOverCurrentProtectorSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
measurementsOverCurrentProtectorSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
measurementsOverCurrentProtectorSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
externalSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3), )
externalSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
measurementsExternalSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
measurementsExternalSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
wireSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3), )
wireSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"))
measurementsWireSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsWireSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
measurementsWireSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
transferSwitchSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3), )
transferSwitchSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"))
measurementsTransferSwitchSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
measurementsTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
measurementsTransferSwitchSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
measurementsTransferSwitchSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
measurementsTransferSwitchSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
outletSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2), )
outletSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"))
switchingOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 2), OutletSwitchingOperationsEnumeration()).setMaxAccess("readwrite")
outletSwitchingState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
outletSwitchingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
transferSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1), )
transferSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"))
transferSwitchActiveInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,64))).setMaxAccess("readonly")
transferSwitchTransferToInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,64))).setMaxAccess("readwrite")
transferSwitchAlarmOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
transferSwitchLastTransferReason = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 4), TransferSwitchTransferReasonEnumeration()).setMaxAccess("readonly")
actuatorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2), )
actuatorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
actuatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
rcmSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2), )
rcmSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"))
rcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
inletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1), )
inletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
inletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
outletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1), )
outletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
outletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
unitSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1), )
unitSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
unitSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
reliabilityDataTableSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
reliabilityDataTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2), )
reliabilityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "reliabilityIndex"))
reliabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4096)))
reliabilityId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
reliabilityDataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
reliabilityDataMaxPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
reliabilityDataWorstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
reliabilityDataThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
reliabilityDataRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
reliabilityDataRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
reliabilityDataFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 9), Bits().clone(namedValues=NamedValues(("invalidFlag", 0), ("oldValue", 1), ("criticalEntry", 2),))).setMaxAccess("readonly")
reliabilityErrorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2), )
reliabilityErrorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1), ).setIndexNames((0, "PDU2-MIB", "reliabilityErrorLogIndex"))
reliabilityErrorLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
reliabilityErrorLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
reliabilityErrorLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
reliabilityErrorLogThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
reliabilityErrorLogRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
reliabilityErrorLogRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
reliabilityErrorLogPOH = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
reliabilityErrorLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 1)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
systemReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 2)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 3)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 4)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 5)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 8)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 11)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 12)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 13)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
roleAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 14)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
roleModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 15)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
roleDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 16)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 20)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
deviceUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 21)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 22)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 23)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "switchingOperation"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 24)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 28)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 38)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 41)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 53)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 54)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
pduSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 60)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
inletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 61)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsInletSensorTimeStamp"), ("PDU2-MIB", "measurementsInletSensorValue"), ("PDU2-MIB", "measurementsInletSensorState"), ("PDU2-MIB", "measurementsInletSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
inletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 62)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "inletPoleNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorValue"), ("PDU2-MIB", "measurementsInletPoleSensorState"), ("PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
outletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 63)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletSensorValue"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "measurementsOutletSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
outletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 64)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "outletPoleNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletPoleSensorValue"), ("PDU2-MIB", "measurementsOutletPoleSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
overCurrentProtectorSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 65)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "overCurrentProtectorLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
externalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 66)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "externalSensorNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("PDU2-MIB", "measurementsExternalSensorValue"), ("PDU2-MIB", "measurementsExternalSensorState"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "externalSensorSerialNumber"), ("PDU2-MIB", "externalOnOffSensorSubtype"), ("PDU2-MIB", "externalSensorChannelNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
smtpMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 67)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "smtpMessageRecipients"), ("PDU2-MIB", "smtpServer"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
ldapError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 68)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "errorDescription"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
deviceUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 70)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
loadSheddingModeEntered = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 71)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
loadSheddingModeExited = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 72)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
pingServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 73)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
pingServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 74)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
serverNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 75)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
serverReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 76)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
rfCodeTagConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 77)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
rfCodeTagDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 78)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
deviceIdentificationChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 79)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "deviceChangedParameter"), ("PDU2-MIB", "changedParameterNewValue"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
usbSlaveConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 80)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
usbSlaveDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 81)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
lhxSupportChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 82)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"), ("PDU2-MIB", "lhxSupportEnabled"),))
userAcceptedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 83)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
userDeclinedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 84)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
wireSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 85)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "wireLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsWireSensorTimeStamp"), ("PDU2-MIB", "measurementsWireSensorValue"), ("PDU2-MIB", "measurementsWireSensorState"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
transferSwitchSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 86)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "transferSwitchLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorState"), ("PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"), ("PDU2-MIB", "transferSwitchLastTransferReason"),))
deviceSettingsSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 88)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
deviceSettingsRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 89)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
webcamInserted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 90)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
webcamRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 91)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
inletEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 92)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
inletDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 93)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
serverConnectivityUnrecoverable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 94)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
radiusError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 95)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "errorDescription"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
serverReachabilityError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 96)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "errorDescription"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
inletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 97)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
outletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 98)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
unknownPeripheralDeviceAttached = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 99)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDeviceRomcode"), ("PDU2-MIB", "peripheralDevicePackagePosition"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
peripheralDeviceFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 100)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
unitSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 101)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
unitSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 102)).setObjects(*(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "sysContact"), ("PDU2-MIB", "sysName"), ("PDU2-MIB", "sysLocation"),))
mibBuilder.exportSymbols("PDU2-MIB", outletSensorControl=outletSensorControl, outletUseGlobalPowerCyclingPowerOffPeriod=outletUseGlobalPowerCyclingPowerOffPeriod, externalSensorTypeDefaultUpperWarningThreshold=externalSensorTypeDefaultUpperWarningThreshold, inletPoleSensorDecimalDigits=inletPoleSensorDecimalDigits, inletPoleNumber=inletPoleNumber, inletDeviceCapabilities=inletDeviceCapabilities, inletSensorStateChange=inletSensorStateChange, outletConfigurationTable=outletConfigurationTable, measurementsInletPoleSensorIsAvailable=measurementsInletPoleSensorIsAvailable, dataLogging=dataLogging, measurementsExternalSensorTimeStamp=measurementsExternalSensorTimeStamp, GlobalOutletStateOnStartupEnumeration=GlobalOutletStateOnStartupEnumeration, inletSensorSignedMinimum=inletSensorSignedMinimum, deviceIdentificationChanged=deviceIdentificationChanged, outletConfigurationEntry=outletConfigurationEntry, externalSensorTypeDefaultHysteresis=externalSensorTypeDefaultHysteresis, measurementsOutletPoleSensorSignedValue=measurementsOutletPoleSensorSignedValue, inletRatedVoltage=inletRatedVoltage, PlugTypeEnumeration=PlugTypeEnumeration, externalSensorLogTable=externalSensorLogTable, globalOutletStateOnStartup=globalOutletStateOnStartup, inletSensorControlTable=inletSensorControlTable, outletPoleNumber=outletPoleNumber, outletPoleSensorLowerWarningThreshold=outletPoleSensorLowerWarningThreshold, externalSensorTypeDefaultThresholdsTable=externalSensorTypeDefaultThresholdsTable, transferSwitchSensorSignedMaximum=transferSwitchSensorSignedMaximum, externalSensorTolerance=externalSensorTolerance, outletPoleSensorMaximum=outletPoleSensorMaximum, transferSwitchSensorMeasurementsTable=transferSwitchSensorMeasurementsTable, logOutletSensorMaxValue=logOutletSensorMaxValue, transferSwitchSensorAccuracy=transferSwitchSensorAccuracy, inletPoleSensorEnabledThresholds=inletPoleSensorEnabledThresholds, measurementsOverCurrentProtectorSensorIsAvailable=measurementsOverCurrentProtectorSensorIsAvailable, outletPoleSensorUnits=outletPoleSensorUnits, externalSensorUseDefaultThresholds=externalSensorUseDefaultThresholds, unitSensorControlEntry=unitSensorControlEntry, outletSensorUnits=outletSensorUnits, pduRatedVoltage=pduRatedVoltage, outletSensorDecimalDigits=outletSensorDecimalDigits, outletPoleSensorUpperWarningThreshold=outletPoleSensorUpperWarningThreshold, transferSwitchSensorLogAvailable=transferSwitchSensorLogAvailable, inletConfigurationEntry=inletConfigurationEntry, reliabilityErrorLog=reliabilityErrorLog, externalSensorStateChange=externalSensorStateChange, deviceSettingsRestored=deviceSettingsRestored, externalSensorXCoordinate=externalSensorXCoordinate, inletPoleSensorMeasurementsTable=inletPoleSensorMeasurementsTable, outletSensorResolution=outletSensorResolution, logInletSensorSignedAvgValue=logInletSensorSignedAvgValue, controllerConfigurationEntry=controllerConfigurationEntry, overCurrentProtectorSensorUnits=overCurrentProtectorSensorUnits, logInletSensorMinValue=logInletSensorMinValue, wireCount=wireCount, raritan=raritan, inletSensorSignedUpperWarningThreshold=inletSensorSignedUpperWarningThreshold, pduId=pduId, transferSwitchSensorDecimalDigits=transferSwitchSensorDecimalDigits, peripheralDevicePackageEntry=peripheralDevicePackageEntry, externalSensors=externalSensors, overCurrentProtectorCount=overCurrentProtectorCount, pxInetAddressType=pxInetAddressType, externalSensorConfigurationEntry=externalSensorConfigurationEntry, overCurrentProtectorSensorUpperWarningThreshold=overCurrentProtectorSensorUpperWarningThreshold, wireSensorMeasurementsEntry=wireSensorMeasurementsEntry, inletPoleSensorAccuracy=inletPoleSensorAccuracy, unitSensorSignedLowerCriticalThreshold=unitSensorSignedLowerCriticalThreshold, logExternalSensor=logExternalSensor, wireSensorMeasurementsTable=wireSensorMeasurementsTable, logExternalSensorMaxValue=logExternalSensorMaxValue, outletSensorTolerance=outletSensorTolerance, pduNumber=pduNumber, overCurrentProtectorSensorResolution=overCurrentProtectorSensorResolution, outletStateOnStartup=outletStateOnStartup, overCurrentProtectorSensorSignedLowerCriticalThreshold=overCurrentProtectorSensorSignedLowerCriticalThreshold, measurementsTransferSwitchSensorState=measurementsTransferSwitchSensorState, SensorUnitsEnumeration=SensorUnitsEnumeration, externalSensorTypeDefaultUpperCriticalThreshold=externalSensorTypeDefaultUpperCriticalThreshold, serverReachabilityError=serverReachabilityError, reliabilityErrorLogRawLowerBytes=reliabilityErrorLogRawLowerBytes, outletPoleCapabilities=outletPoleCapabilities, measurementsInletPoleSensorSignedValue=measurementsInletPoleSensorSignedValue, unitSensorMinimum=unitSensorMinimum, smtpServer=smtpServer, inletSensorControlEntry=inletSensorControlEntry, logExternalSensorState=logExternalSensorState, rfCodeTagConnected=rfCodeTagConnected, outletPoleSensorAccuracy=outletPoleSensorAccuracy, outletPoleSensorHysteresis=outletPoleSensorHysteresis, wireSensorLogTable=wireSensorLogTable, outletSensorReset=outletSensorReset, measurementsWireSensorIsAvailable=measurementsWireSensorIsAvailable, targetUser=targetUser, SensorTypeEnumeration=SensorTypeEnumeration, boardVersion=boardVersion, OverCurrentProtectorTypeEnumeration=OverCurrentProtectorTypeEnumeration, pduRatedVA=pduRatedVA, nameplateTable=nameplateTable, deviceCascadePosition=deviceCascadePosition, wireSensorStateChangeDelay=wireSensorStateChangeDelay, outletPoleSensorSignedLowerCriticalThreshold=outletPoleSensorSignedLowerCriticalThreshold, userLogout=userLogout, unitSensorHysteresis=unitSensorHysteresis, outletPoleSensorMeasurementsEntry=outletPoleSensorMeasurementsEntry, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, outletSensorControlEntry=outletSensorControlEntry, reliabilityErrorLogValue=reliabilityErrorLogValue, inrushGuardDelay=inrushGuardDelay, measurementsUnitSensorState=measurementsUnitSensorState, logUnitSensorSignedAvgValue=logUnitSensorSignedAvgValue, inlets=inlets, overCurrentProtectorSensorLowerCriticalThreshold=overCurrentProtectorSensorLowerCriticalThreshold, outletSensorLowerCriticalThreshold=outletSensorLowerCriticalThreshold, logWireSensorState=logWireSensorState, unitSensorSignedLowerWarningThreshold=unitSensorSignedLowerWarningThreshold, changedParameterNewValue=changedParameterNewValue, pxIPAddress=pxIPAddress, outletPoleSensorLogEntry=outletPoleSensorLogEntry, logInletSensorMaxValue=logInletSensorMaxValue, transferSwitchSensorSignedUpperCriticalThreshold=transferSwitchSensorSignedUpperCriticalThreshold, externalSensorControl=externalSensorControl, outletPoleSensorSignedMaximum=outletPoleSensorSignedMaximum, inletSensorResetValue=inletSensorResetValue, userAdded=userAdded, outletSensorEnabledThresholds=outletSensorEnabledThresholds, outletSensorUpperWarningThreshold=outletSensorUpperWarningThreshold, logInletPoleSensorMinValue=logInletPoleSensorMinValue, inletPoleSensorConfigurationTable=inletPoleSensorConfigurationTable, transferSwitchAutoReTransferWaitTime=transferSwitchAutoReTransferWaitTime, measurementsInletSensorState=measurementsInletSensorState, controlGroup=controlGroup, inletPoleSensorMaximum=inletPoleSensorMaximum, wireSensorEnabledThresholds=wireSensorEnabledThresholds, outletRatedVoltage=outletRatedVoltage, unitSensorConfigurationTable=unitSensorConfigurationTable, unitSensorControlTable=unitSensorControlTable, inletSensorAccuracy=inletSensorAccuracy, unitSensorEnabledThresholds=unitSensorEnabledThresholds, logOutletSensorState=logOutletSensorState, frontPanelActuatorControl=frontPanelActuatorControl, errorDescription=errorDescription, inletName=inletName, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, outletSensorMinimum=outletSensorMinimum, unitSensorStateChangeDelay=unitSensorStateChangeDelay, pduName=pduName, inletControllerCount=inletControllerCount, OutletSwitchingOperationsEnumeration=OutletSwitchingOperationsEnumeration, logExternalSensorMinValue=logExternalSensorMinValue, dataLoggingEnableForAllSensors=dataLoggingEnableForAllSensors, unitSensorTolerance=unitSensorTolerance, globalOutletPowerCyclingPowerOffPeriod=globalOutletPowerCyclingPowerOffPeriod, reliabilityDataEntry=reliabilityDataEntry, unitSensorLogEntry=unitSensorLogEntry, logOverCurrentProtectorSensorSignedAvgValue=logOverCurrentProtectorSensorSignedAvgValue, outletSwitchControlTable=outletSwitchControlTable, measurementsOutletSensorValue=measurementsOutletSensorValue, reliabilityDataRawLowerBytes=reliabilityDataRawLowerBytes, meteringControllerCount=meteringControllerCount, pduRatedFrequency=pduRatedFrequency, peripheralDevicePackageModel=peripheralDevicePackageModel, outletPowerCyclingPowerOffPeriod=outletPowerCyclingPowerOffPeriod, logInlet=logInlet, roleAdded=roleAdded, logTransferSwitchSensorMinValue=logTransferSwitchSensorMinValue, userDeclinedRestrictedServiceAgreement=userDeclinedRestrictedServiceAgreement, overCurrentProtectorSensorLogAvailable=overCurrentProtectorSensorLogAvailable, overCurrentProtectorSensorLogTable=overCurrentProtectorSensorLogTable, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, trapInformationTable=trapInformationTable, wireSensorStateChange=wireSensorStateChange, unitSensorResetValue=unitSensorResetValue, inletRatedVA=inletRatedVA, measurementsWireSensorValue=measurementsWireSensorValue, measurementsUnitSensorIsAvailable=measurementsUnitSensorIsAvailable, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, outletSwitchControlEntry=outletSwitchControlEntry, BoardTypeEnumeration=BoardTypeEnumeration, logOverCurrentProtectorSensorState=logOverCurrentProtectorSensorState, logUnitSensorMinValue=logUnitSensorMinValue, transferSwitchSensorMeasurementsEntry=transferSwitchSensorMeasurementsEntry, unitSensorLowerCriticalThreshold=unitSensorLowerCriticalThreshold, firstNTPServerAddress=firstNTPServerAddress, unitConfigurationEntry=unitConfigurationEntry, logTransferSwitchSensorState=logTransferSwitchSensorState, peripheralDevicePackagePosition=peripheralDevicePackagePosition, measurementsPerLogEntry=measurementsPerLogEntry, pduDaisychainMemberType=pduDaisychainMemberType, outletSwitchingTimeStamp=outletSwitchingTimeStamp, reliabilityIndex=reliabilityIndex, transferSwitchTransferToInlet=transferSwitchTransferToInlet, inletSensorUpperWarningThreshold=inletSensorUpperWarningThreshold, transferSwitchSensorTolerance=transferSwitchSensorTolerance, overCurrentProtectorRatedCurrent=overCurrentProtectorRatedCurrent, rcmState=rcmState, logSize=logSize, transferSwitchSensorConfigurationTable=transferSwitchSensorConfigurationTable, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, overCurrentProtectorPowerSource=overCurrentProtectorPowerSource, inletPoleSensorSignedLowerWarningThreshold=inletPoleSensorSignedLowerWarningThreshold, outletSensorResetValue=outletSensorResetValue, overCurrentProtectorSensorSignedMinimum=overCurrentProtectorSensorSignedMinimum, DeviceCascadeTypeEnumeration=DeviceCascadeTypeEnumeration, logTransferSwitch=logTransferSwitch, peripheralDevicePackageState=peripheralDevicePackageState, unitSensorMeasurementsTable=unitSensorMeasurementsTable, reliabilityDataThreshold=reliabilityDataThreshold, lhxSupportChanged=lhxSupportChanged, conformance=conformance, measurementsWire=measurementsWire, wireSensorAccuracy=wireSensorAccuracy, outletSwitchable=outletSwitchable, unitSensorLowerWarningThreshold=unitSensorLowerWarningThreshold, transferSwitchName=transferSwitchName, inletEnabled=inletEnabled, logTransferSwitchSensorSignedAvgValue=logTransferSwitchSensorSignedAvgValue, frontPanelOutletSwitching=frontPanelOutletSwitching, outletSensorConfigurationEntry=outletSensorConfigurationEntry, logWireSensorMaxValue=logWireSensorMaxValue, roleModified=roleModified, overCurrentProtectorSensorTolerance=overCurrentProtectorSensorTolerance, externalSensorChannelNumber=externalSensorChannelNumber, reliabilityErrorLogEntry=reliabilityErrorLogEntry, outletReceptacle=outletReceptacle, loadSheddingModeExited=loadSheddingModeExited, lhxSupportEnabled=lhxSupportEnabled, reliabilityErrorLogRawUpperBytes=reliabilityErrorLogRawUpperBytes, logOverCurrentProtectorSensorAvgValue=logOverCurrentProtectorSensorAvgValue, systemStarted=systemStarted, outletSensorLogTable=outletSensorLogTable, userModified=userModified, URL=URL, outletPoleSensorConfigurationTable=outletPoleSensorConfigurationTable, logInletPoleSensorSignedMinValue=logInletPoleSensorSignedMinValue, outlets=outlets, inletSensorSignedLowerWarningThreshold=inletSensorSignedLowerWarningThreshold, serverReachability=serverReachability, imageVersion=imageVersion, newestLogID=newestLogID, outletSensorLogEntry=outletSensorLogEntry, outletPoleSensorSignedUpperCriticalThreshold=outletPoleSensorSignedUpperCriticalThreshold, outletSwitchingState=outletSwitchingState, complianceRev1=complianceRev1, radiusError=radiusError, transferSwitchControlTable=transferSwitchControlTable, overCurrentProtectorSensorMeasurementsTable=overCurrentProtectorSensorMeasurementsTable, outletSensorControlTable=outletSensorControlTable, outletSensorStateChangeDelay=outletSensorStateChangeDelay, trapInformationGroup=trapInformationGroup, outletPoleSensorDecimalDigits=outletPoleSensorDecimalDigits, webcamConnectionPort=webcamConnectionPort, logOverCurrentProtectorSensorSignedMinValue=logOverCurrentProtectorSensorSignedMinValue, outletPoleSensorSignedLowerWarningThreshold=outletPoleSensorSignedLowerWarningThreshold, ldapError=ldapError, logTimeStamp=logTimeStamp)
mibBuilder.exportSymbols("PDU2-MIB", inletRCMResidualOperatingCurrent=inletRCMResidualOperatingCurrent, measurementsOutletSensorSignedValue=measurementsOutletSensorSignedValue, transferSwitchLabel=transferSwitchLabel, logConfigurationEntry=logConfigurationEntry, outletPoleSensorLogAvailable=outletPoleSensorLogAvailable, configuration=configuration, transferSwitchActiveInlet=transferSwitchActiveInlet, unitSensorDecimalDigits=unitSensorDecimalDigits, logUnitSensorDataAvailable=logUnitSensorDataAvailable, logTransferSwitchSensorSignedMaxValue=logTransferSwitchSensorSignedMaxValue, pingServerEnabled=pingServerEnabled, reliabilityErrorLogIndex=reliabilityErrorLogIndex, externalSensorPosition=externalSensorPosition, transferSwitchCapabilities=transferSwitchCapabilities, unitSensorConfigurationEntry=unitSensorConfigurationEntry, outletSensorMaximum=outletSensorMaximum, reliabilityDataValue=reliabilityDataValue, transferSwitchAutoReTransferRequiresPhaseSync=transferSwitchAutoReTransferRequiresPhaseSync, unitSensorMaximum=unitSensorMaximum, overCurrentProtectorIndex=overCurrentProtectorIndex, board=board, roleDeleted=roleDeleted, inletSensorControl=inletSensorControl, overCurrentProtectorSensorMeasurementsEntry=overCurrentProtectorSensorMeasurementsEntry, inletPoleCapabilities=inletPoleCapabilities, inletPoleIndex=inletPoleIndex, pxInetGateway=pxInetGateway, inletPoleSensorHysteresis=inletPoleSensorHysteresis, unitSensorStateChange=unitSensorStateChange, logOverCurrentProtectorSensorMaxValue=logOverCurrentProtectorSensorMaxValue, rcmControl=rcmControl, inletPlug=inletPlug, logOverCurrentProtector=logOverCurrentProtector, overCurrentProtectorConfigurationTable=overCurrentProtectorConfigurationTable, transferSwitchId=transferSwitchId, measurementsOverCurrentProtectorSensorTimeStamp=measurementsOverCurrentProtectorSensorTimeStamp, logInletPoleSensorSignedAvgValue=logInletPoleSensorSignedAvgValue, wireSensorUnits=wireSensorUnits, overCurrentProtectorSensorConfigurationTable=overCurrentProtectorSensorConfigurationTable, oldSensorState=oldSensorState, ProductTypeEnumeration=ProductTypeEnumeration, wireConfigurationTable=wireConfigurationTable, inletPoleSensorLowerCriticalThreshold=inletPoleSensorLowerCriticalThreshold, measurementsUnit=measurementsUnit, outletSensorAccuracy=outletSensorAccuracy, externalSensorResolution=externalSensorResolution, peripheralDevicesAutoManagement=peripheralDevicesAutoManagement, userPasswordChanged=userPasswordChanged, reliabilityDataFlags=reliabilityDataFlags, inletPoleSensorSignedUpperCriticalThreshold=inletPoleSensorSignedUpperCriticalThreshold, logOutletSensorSignedMaxValue=logOutletSensorSignedMaxValue, transferSwitchControlEntry=transferSwitchControlEntry, peripheralDevicePackageFirmwareTimeStamp=peripheralDevicePackageFirmwareTimeStamp, outletPoleSensorMinimum=outletPoleSensorMinimum, inletRatedCurrent=inletRatedCurrent, outletSensorSignedLowerWarningThreshold=outletSensorSignedLowerWarningThreshold, measurementsOutletSensorTimeStamp=measurementsOutletSensorTimeStamp, gateway=gateway, transferSwitchSensorLowerCriticalThreshold=transferSwitchSensorLowerCriticalThreshold, transferSwitchFrontPanelManualTransferButtonEnabled=transferSwitchFrontPanelManualTransferButtonEnabled, overCurrentProtectorSensorHysteresis=overCurrentProtectorSensorHysteresis, outletName=outletName, outletSensorConfigurationTable=outletSensorConfigurationTable, logConfigurationTable=logConfigurationTable, peripheralDeviceRomcode=peripheralDeviceRomcode, logFileCleared=logFileCleared, typeOfSensor=typeOfSensor, wireSensorMaximum=wireSensorMaximum, outletPoleSensorConfigurationEntry=outletPoleSensorConfigurationEntry, outletPoleSensorSignedUpperWarningThreshold=outletPoleSensorSignedUpperWarningThreshold, transferSwitchAutoReTransferEnabled=transferSwitchAutoReTransferEnabled, deviceSettingsSaved=deviceSettingsSaved, externalSensorConfigurationTable=externalSensorConfigurationTable, wireSensorHysteresis=wireSensorHysteresis, pduSerialNumber=pduSerialNumber, externalSensorYCoordinate=externalSensorYCoordinate, unitSensorMeasurementsEntry=unitSensorMeasurementsEntry, transferSwitchSensorEnabledThresholds=transferSwitchSensorEnabledThresholds, transferSwitchSensorSignedUpperWarningThreshold=transferSwitchSensorSignedUpperWarningThreshold, inletSensorLowerCriticalThreshold=inletSensorLowerCriticalThreshold, pduPowerCyclingPowerOffPeriod=pduPowerCyclingPowerOffPeriod, pxInetIPAddress=pxInetIPAddress, peripheralDevicePackageId=peripheralDevicePackageId, transferSwitchSensorLogTable=transferSwitchSensorLogTable, serverReachable=serverReachable, wireSensorTolerance=wireSensorTolerance, inletPlugDescriptor=inletPlugDescriptor, secondNTPServerAddress=secondNTPServerAddress, outletSensorHysteresis=outletSensorHysteresis, reliabilityDataRawUpperBytes=reliabilityDataRawUpperBytes, unitSensorUpperWarningThreshold=unitSensorUpperWarningThreshold, overCurrentProtectorSensorLowerWarningThreshold=overCurrentProtectorSensorLowerWarningThreshold, boardIndex=boardIndex, unknownPeripheralDeviceAttached=unknownPeripheralDeviceAttached, userName=userName, externalSensorTypeDefaultEnabledThresholds=externalSensorTypeDefaultEnabledThresholds, outletReceptacleDescriptor=outletReceptacleDescriptor, outletRatedVA=outletRatedVA, wireSensorLowerCriticalThreshold=wireSensorLowerCriticalThreshold, unitConfigurationTable=unitConfigurationTable, trapsGroup=trapsGroup, agentInetPortNumber=agentInetPortNumber, reliabilityId=reliabilityId, systemReset=systemReset, logTransferSwitchSensorAvgValue=logTransferSwitchSensorAvgValue, externalSensorUnits=externalSensorUnits, measurementsExternalSensorState=measurementsExternalSensorState, reliabilityGroup=reliabilityGroup, unitSensorSignedUpperWarningThreshold=unitSensorSignedUpperWarningThreshold, inletSensorLogEntry=inletSensorLogEntry, externalSensorDescription=externalSensorDescription, logOverCurrentProtectorSensorSignedMaxValue=logOverCurrentProtectorSensorSignedMaxValue, frontPanelRCMSelfTest=frontPanelRCMSelfTest, externalSensorCount=externalSensorCount, wireSensorUpperCriticalThreshold=wireSensorUpperCriticalThreshold, measurementsInletSensorTimeStamp=measurementsInletSensorTimeStamp, overCurrentProtectorLabel=overCurrentProtectorLabel, transferSwitchSensorConfigurationEntry=transferSwitchSensorConfigurationEntry, usbSlaveConnected=usbSlaveConnected, unitSensorReset=unitSensorReset, externalSensorSerialNumber=externalSensorSerialNumber, unitSensorLogAvailable=unitSensorLogAvailable, actuatorControlTable=actuatorControlTable, peripheralDevicePackageSerialNumber=peripheralDevicePackageSerialNumber, pduImage=pduImage, inletPoleSensorMeasurementsEntry=inletPoleSensorMeasurementsEntry, unitSensorResolution=unitSensorResolution, wireId=wireId, logWire=logWire, deviceUpdateFailed=deviceUpdateFailed, externalSensorMinimum=externalSensorMinimum, unitSensorSignedMaximum=unitSensorSignedMaximum, logGroup=logGroup, externalSensorTypeDefaultThresholdsEntry=externalSensorTypeDefaultThresholdsEntry, ipAddressGroup=ipAddressGroup, overCurrentProtectorType=overCurrentProtectorType, wireSensorLogEntry=wireSensorLogEntry, outletSensorMeasurementsEntry=outletSensorMeasurementsEntry, measurementPeriod=measurementPeriod, switchingOperation=switchingOperation, inletPoleSensorSignedMaximum=inletPoleSensorSignedMaximum, logOutletPoleSensorState=logOutletPoleSensorState, bulkConfigurationCopied=bulkConfigurationCopied, wireSensorResolution=wireSensorResolution, inletSensorConfigurationTable=inletSensorConfigurationTable, peripheralDevicePackageTable=peripheralDevicePackageTable, logUnitSensorState=logUnitSensorState, logOutletPoleSensorMaxValue=logOutletPoleSensorMaxValue, outletSensorLowerWarningThreshold=outletSensorLowerWarningThreshold, secondNTPServerAddressType=secondNTPServerAddressType, externalSensorHysteresis=externalSensorHysteresis, webcamInserted=webcamInserted, transferSwitchConfigurationTable=transferSwitchConfigurationTable, measurementsOverCurrentProtectorSensorValue=measurementsOverCurrentProtectorSensorValue, reliabilityErrorLogPOH=reliabilityErrorLogPOH, environmental=environmental, measurementsOutletSensorState=measurementsOutletSensorState, reliabilityDataMaxPossible=reliabilityDataMaxPossible, measurementsExternalSensorIsAvailable=measurementsExternalSensorIsAvailable, logExternalSensorDataAvailable=logExternalSensorDataAvailable, logTimeStampEntry=logTimeStampEntry, transferSwitch=transferSwitch, outletControl=outletControl, pduManufacturer=pduManufacturer, inletSensorLogAvailable=inletSensorLogAvailable, deviceChangedParameter=deviceChangedParameter, reliabilityData=reliabilityData, pduSensorStateChange=pduSensorStateChange, overCurrentProtectorSensorAccuracy=overCurrentProtectorSensorAccuracy, outletSensorSignedUpperCriticalThreshold=outletSensorSignedUpperCriticalThreshold, transferSwitchSensorSignedLowerCriticalThreshold=transferSwitchSensorSignedLowerCriticalThreshold, measurementsOutletPoleSensorValue=measurementsOutletPoleSensorValue, measurementsExternalSensor=measurementsExternalSensor, externalSensorLogEntry=externalSensorLogEntry, measurementsGroup=measurementsGroup, externalSensorAccuracy=externalSensorAccuracy, unitSensorLogTable=unitSensorLogTable, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, deviceUpdateCompleted=deviceUpdateCompleted, outletSequenceDelay=outletSequenceDelay, inletSensorStateChangeDelay=inletSensorStateChangeDelay, logWireSensorAvgValue=logWireSensorAvgValue, wireConfigurationEntry=wireConfigurationEntry, measurementsOutletSensorIsAvailable=measurementsOutletSensorIsAvailable, logIndexTable=logIndexTable, PYSNMP_MODULE_ID=raritan, utcOffset=utcOffset, traps=traps, RelayPowerLossBehaviorEnumeration=RelayPowerLossBehaviorEnumeration, measurementsInlet=measurementsInlet, wirePowerSource=wirePowerSource, logOverCurrentProtectorSensorMinValue=logOverCurrentProtectorSensorMinValue, measurementsWireSensorTimeStamp=measurementsWireSensorTimeStamp, measurementsExternalSensorValue=measurementsExternalSensorValue, reliabilityDataTableSequenceNumber=reliabilityDataTableSequenceNumber, inletSensorUnits=inletSensorUnits, externalSensorTypeDefaultLowerWarningThreshold=externalSensorTypeDefaultLowerWarningThreshold, measurementsOutletPoleSensorIsAvailable=measurementsOutletPoleSensorIsAvailable, inletSensorSignedUpperCriticalThreshold=inletSensorSignedUpperCriticalThreshold, overCurrentProtectorSensorUpperCriticalThreshold=overCurrentProtectorSensorUpperCriticalThreshold, logInletSensorState=logInletSensorState, measurementsInletPoleSensorTimeStamp=measurementsInletPoleSensorTimeStamp, reliabilityErrorLogTable=reliabilityErrorLogTable, logOutletPoleSensorDataAvailable=logOutletPoleSensorDataAvailable, externalSensorZCoordinate=externalSensorZCoordinate, oldTrapsGroup=oldTrapsGroup, wireCapabilities=wireCapabilities, TransferSwitchTransferReasonEnumeration=TransferSwitchTransferReasonEnumeration, netmask=netmask, externalSensorStateChangeDelay=externalSensorStateChangeDelay, overCurrentProtectorSensorSignedUpperWarningThreshold=overCurrentProtectorSensorSignedUpperWarningThreshold, inletConfigurationTable=inletConfigurationTable, boardType=boardType, peripheralDeviceFirmwareUpdateState=peripheralDeviceFirmwareUpdateState, sensorType=sensorType, inletPoleSensorUpperCriticalThreshold=inletPoleSensorUpperCriticalThreshold, unitDeviceCapabilities=unitDeviceCapabilities, deviceCascadeType=deviceCascadeType, inletSensorDecimalDigits=inletSensorDecimalDigits, inletEnableState=inletEnableState, externalSensorMaximum=externalSensorMaximum, inletPoleSensorTolerance=inletPoleSensorTolerance, serverReachabilityEntry=serverReachabilityEntry, logInletSensorSignedMaxValue=logInletSensorSignedMaxValue, measurementsTransferSwitchSensorTimeStamp=measurementsTransferSwitchSensorTimeStamp, nameplateEntry=nameplateEntry, wires=wires, inletPoleSensorSignedUpperWarningThreshold=inletPoleSensorSignedUpperWarningThreshold, transferSwitchControl=transferSwitchControl, serverPingEnabled=serverPingEnabled, logInletSensorAvgValue=logInletSensorAvgValue, logWireSensorDataAvailable=logWireSensorDataAvailable, serverNotReachable=serverNotReachable, outletPoleCount=outletPoleCount, passwordSettingsChanged=passwordSettingsChanged, wireSensorMinimum=wireSensorMinimum, inletSensorMaximum=inletSensorMaximum, reliabilityDataWorstValue=reliabilityDataWorstValue, userAcceptedRestrictedServiceAgreement=userAcceptedRestrictedServiceAgreement, oldestLogID=oldestLogID, measurementsOverCurrentProtector=measurementsOverCurrentProtector, outletSensorUpperCriticalThreshold=outletSensorUpperCriticalThreshold, inletSensorResolution=inletSensorResolution, transferSwitchSensorUnits=transferSwitchSensorUnits, externalSensorType=externalSensorType, overCurrentProtectorName=overCurrentProtectorName, inletSensorEnabledThresholds=inletSensorEnabledThresholds, deviceUpdateStarted=deviceUpdateStarted, PeripheralDeviceFirmwareUpdateStateEnumeration=PeripheralDeviceFirmwareUpdateStateEnumeration, unitSensorUnits=unitSensorUnits, wireSensorConfigurationTable=wireSensorConfigurationTable, ReceptacleTypeEnumeration=ReceptacleTypeEnumeration, peripheralDeviceFirmwareUpdate=peripheralDeviceFirmwareUpdate, peripheralDevicePackageMinFirmwareVersion=peripheralDevicePackageMinFirmwareVersion)
mibBuilder.exportSymbols("PDU2-MIB", logInletPoleSensorSignedMaxValue=logInletPoleSensorSignedMaxValue, transferSwitchSensorStateChangeDelay=transferSwitchSensorStateChangeDelay, inletPoleSensorSignedMinimum=inletPoleSensorSignedMinimum, outletRatedCurrent=outletRatedCurrent, transferSwitchSensorSignedLowerWarningThreshold=transferSwitchSensorSignedLowerWarningThreshold, pingServerDisabled=pingServerDisabled, transferSwitchPreferredInlet=transferSwitchPreferredInlet, outletSensorMeasurementsTable=outletSensorMeasurementsTable, externalSensorLogAvailable=externalSensorLogAvailable, inletLabel=inletLabel, logOutletSensorAvgValue=logOutletSensorAvgValue, outletSensorSignedUpperWarningThreshold=outletSensorSignedUpperWarningThreshold, serverIPAddress=serverIPAddress, unit=unit, overCurrentProtectorSensorSignedLowerWarningThreshold=overCurrentProtectorSensorSignedLowerWarningThreshold, unitSensorAccuracy=unitSensorAccuracy, outletPoleSensorSignedMinimum=outletPoleSensorSignedMinimum, userLogin=userLogin, pdu2=pdu2, logTimeStampTable=logTimeStampTable, rcmSelfTestEntry=rcmSelfTestEntry, pduRatedCurrent=pduRatedCurrent, rcmSelfTestTable=rcmSelfTestTable, inletSensorLowerWarningThreshold=inletSensorLowerWarningThreshold, DeviceIdentificationParameterEnumeration=DeviceIdentificationParameterEnumeration, inletPoleSensorStateChange=inletPoleSensorStateChange, inletSensorMinimum=inletSensorMinimum, inletDisabled=inletDisabled, outletSensorSignedLowerCriticalThreshold=outletSensorSignedLowerCriticalThreshold, configGroup=configGroup, overCurrentProtectorSensorStateChangeDelay=overCurrentProtectorSensorStateChangeDelay, externalSensorMeasurementsTable=externalSensorMeasurementsTable, measurementsTransferSwitch=measurementsTransferSwitch, roleName=roleName, transferSwitchCount=transferSwitchCount, outletPoleSensorResolution=outletPoleSensorResolution, transferSwitchSensorMinimum=transferSwitchSensorMinimum, compliances=compliances, serverReachabilityTable=serverReachabilityTable, outletLabel=outletLabel, logInletPoleSensorMaxValue=logInletPoleSensorMaxValue, rfCodeTagDisconnected=rfCodeTagDisconnected, wireSensorConfigurationEntry=wireSensorConfigurationEntry, outletPoleSensorLowerCriticalThreshold=outletPoleSensorLowerCriticalThreshold, outletSensorSignedMaximum=outletSensorSignedMaximum, inletPoleSensorStateChangeDelay=inletPoleSensorStateChangeDelay, inletPoleSensorMinimum=inletPoleSensorMinimum, logUnitSensorSignedMaxValue=logUnitSensorSignedMaxValue, inletCount=inletCount, powerControl=powerControl, inletSensorMeasurementsTable=inletSensorMeasurementsTable, controllerConfigurationTable=controllerConfigurationTable, wireSensorDecimalDigits=wireSensorDecimalDigits, outletPoleSensorLogTable=outletPoleSensorLogTable, synchronizeWithNTPServer=synchronizeWithNTPServer, externalSensorDecimalDigits=externalSensorDecimalDigits, reliabilityErrorLogTime=reliabilityErrorLogTime, outletPowerSource=outletPowerSource, inletPoleCount=inletPoleCount, logOutletSensorSignedMinValue=logOutletSensorSignedMinValue, logUnitSensorMaxValue=logUnitSensorMaxValue, overCurrentProtectorSensorEnabledThresholds=overCurrentProtectorSensorEnabledThresholds, externalSensorIsActuator=externalSensorIsActuator, pxMACAddress=pxMACAddress, SensorStateEnumeration=SensorStateEnumeration, logTransferSwitchSensorDataAvailable=logTransferSwitchSensorDataAvailable, outletCount=outletCount, managedExternalSensorCount=managedExternalSensorCount, logUnitSensorAvgValue=logUnitSensorAvgValue, transferSwitchConfigurationEntry=transferSwitchConfigurationEntry, oldConfigGroup=oldConfigGroup, pduCount=pduCount, inletPoleSensorUnits=inletPoleSensorUnits, pxInetNetmask=pxInetNetmask, overCurrentProtectorSensorLogEntry=overCurrentProtectorSensorLogEntry, logWireSensorMinValue=logWireSensorMinValue, logInletPoleSensorState=logInletPoleSensorState, overCurrentProtector=overCurrentProtector, trapInformation=trapInformation, transferSwitchSensorSignedMinimum=transferSwitchSensorSignedMinimum, reliability=reliability, groups=groups, serverCount=serverCount, inletRatedFrequency=inletRatedFrequency, inletPoleSensorLowerWarningThreshold=inletPoleSensorLowerWarningThreshold, webcamRemoved=webcamRemoved, unitSensorSignedMinimum=unitSensorSignedMinimum, wireSensorLowerWarningThreshold=wireSensorLowerWarningThreshold, logOutletSensorMinValue=logOutletSensorMinValue, logTransferSwitchSensorSignedMinValue=logTransferSwitchSensorSignedMinValue, logOutletPoleSensorSignedMaxValue=logOutletPoleSensorSignedMaxValue, externalSensorTypeDefaultLowerCriticalThreshold=externalSensorTypeDefaultLowerCriticalThreshold, logInletPoleSensorAvgValue=logInletPoleSensorAvgValue, outletPoleIndex=outletPoleIndex, outletPoleSensorStateChange=outletPoleSensorStateChange, externalSensorMeasurementsEntry=externalSensorMeasurementsEntry, transferSwitchLastTransferReason=transferSwitchLastTransferReason, userDeleted=userDeleted, reliabilityErrorLogThreshold=reliabilityErrorLogThreshold, ExternalSensorsZCoordinateUnitsEnumeration=ExternalSensorsZCoordinateUnitsEnumeration, externalSensorName=externalSensorName, transferSwitchSensorResolution=transferSwitchSensorResolution, transferSwitchSensorUpperWarningThreshold=transferSwitchSensorUpperWarningThreshold, logOutletSensorSignedAvgValue=logOutletSensorSignedAvgValue, transferSwitchPowerSource1=transferSwitchPowerSource1, inletPoleSensorConfigurationEntry=inletPoleSensorConfigurationEntry, bulkConfigurationSaved=bulkConfigurationSaved, HundredthsOfAPercentage=HundredthsOfAPercentage, outletSensorStateChange=outletSensorStateChange, inletSensorHysteresis=inletSensorHysteresis, measurementsInletSensorValue=measurementsInletSensorValue, sensorID=sensorID, transferSwitchAlarmOverride=transferSwitchAlarmOverride, unitSensorControl=unitSensorControl, firmwareValidationFailed=firmwareValidationFailed, inletPoleSensorResolution=inletPoleSensorResolution, transferSwitchSensorUpperCriticalThreshold=transferSwitchSensorUpperCriticalThreshold, logUnit=logUnit, userAuthenticationFailure=userAuthenticationFailure, logOutletPoleSensorMinValue=logOutletPoleSensorMinValue, overCurrentProtectorSensorMaximum=overCurrentProtectorSensorMaximum, logIndex=logIndex, measurementsOutletPoleSensorTimeStamp=measurementsOutletPoleSensorTimeStamp, externalOnOffSensorSubtype=externalOnOffSensorSubtype, measurementsOutletPoleSensorState=measurementsOutletPoleSensorState, logTransferSwitchSensorMaxValue=logTransferSwitchSensorMaxValue, externalSensorEnabledThresholds=externalSensorEnabledThresholds, logOutletPoleSensorSignedAvgValue=logOutletPoleSensorSignedAvgValue, transferSwitchPowerSource2=transferSwitchPowerSource2, inletSensorReset=inletSensorReset, loadSheddingModeEntered=loadSheddingModeEntered, transferSwitchSensorLowerWarningThreshold=transferSwitchSensorLowerWarningThreshold, outletId=outletId, measurementsInletPoleSensorState=measurementsInletPoleSensorState, measurementsUnitSensorValue=measurementsUnitSensorValue, measurementsOutlet=measurementsOutlet, actuatorControl=actuatorControl, outletPoleSensorTolerance=outletPoleSensorTolerance, inletSensorSignedMaximum=inletSensorSignedMaximum, logUnitSensorSignedMinValue=logUnitSensorSignedMinValue, inletSensorUpperCriticalThreshold=inletSensorUpperCriticalThreshold, overCurrentProtectorCapabilities=overCurrentProtectorCapabilities, overCurrentProtectorSensorSignedUpperCriticalThreshold=overCurrentProtectorSensorSignedUpperCriticalThreshold, measurementsOverCurrentProtectorSensorSignedValue=measurementsOverCurrentProtectorSensorSignedValue, inletPoleSensorLogAvailable=inletPoleSensorLogAvailable, transferSwitchSensorLogEntry=transferSwitchSensorLogEntry, outletSensorLogAvailable=outletSensorLogAvailable, wireSensorLogAvailable=wireSensorLogAvailable, overCurrentProtectorSensorDecimalDigits=overCurrentProtectorSensorDecimalDigits, measurementsUnitSensorTimeStamp=measurementsUnitSensorTimeStamp, logIndexEntry=logIndexEntry, logInletSensorSignedMinValue=logInletSensorSignedMinValue, inletSensorSignedLowerCriticalThreshold=inletSensorSignedLowerCriticalThreshold, outletPoleSensorMeasurementsTable=outletPoleSensorMeasurementsTable, overCurrentProtectorConfigurationEntry=overCurrentProtectorConfigurationEntry, measurementsOverCurrentProtectorSensorState=measurementsOverCurrentProtectorSensorState, inletSensorTolerance=inletSensorTolerance, logOutletPoleSensorSignedMinValue=logOutletPoleSensorSignedMinValue, reliabilityDataTable=reliabilityDataTable, logOutletPoleSensorAvgValue=logOutletPoleSensorAvgValue, inletPoleSensorLogEntry=inletPoleSensorLogEntry, log=log, productType=productType, logOutletSensorDataAvailable=logOutletSensorDataAvailable, complianceRev2=complianceRev2, oldLogGroup=oldLogGroup, peripheralDevicePackageFirmwareVersion=peripheralDevicePackageFirmwareVersion, measurementsUnitSensorSignedValue=measurementsUnitSensorSignedValue, serverConnectivityUnrecoverable=serverConnectivityUnrecoverable, inletPoleSensorUpperWarningThreshold=inletPoleSensorUpperWarningThreshold, boardFirmwareTimeStamp=boardFirmwareTimeStamp, boardFirmwareVersion=boardFirmwareVersion, smtpMessageRecipients=smtpMessageRecipients, inletSensorConfigurationEntry=inletSensorConfigurationEntry, logInletSensorDataAvailable=logInletSensorDataAvailable, inletSensorMeasurementsEntry=inletSensorMeasurementsEntry, actuatorControlEntry=actuatorControlEntry, inletPoleSensorLogTable=inletPoleSensorLogTable, overCurrentProtectorSensorStateChange=overCurrentProtectorSensorStateChange, outletPoleSensorUpperCriticalThreshold=outletPoleSensorUpperCriticalThreshold, smtpMessageTransmissionFailure=smtpMessageTransmissionFailure, inletSensorLogTable=inletSensorLogTable, measurementsWireSensorState=measurementsWireSensorState, overCurrentProtectorSensorMinimum=overCurrentProtectorSensorMinimum, webcamModel=webcamModel, outletNonCritical=outletNonCritical, oldMeasurementsGroup=oldMeasurementsGroup, outletControllerCount=outletControllerCount, outletSequencingDelay=outletSequencingDelay, measurementsTransferSwitchSensorSignedValue=measurementsTransferSwitchSensorSignedValue, externalSensorAlarmedToNormalDelay=externalSensorAlarmedToNormalDelay, DaisychainMemberTypeEnumeration=DaisychainMemberTypeEnumeration, userSessionTimeout=userSessionTimeout, measurementsTransferSwitchSensorValue=measurementsTransferSwitchSensorValue, measurementsInletPoleSensorValue=measurementsInletPoleSensorValue, logInletPoleSensorDataAvailable=logInletPoleSensorDataAvailable, userBlocked=userBlocked, measurementsTransferSwitchSensorIsAvailable=measurementsTransferSwitchSensorIsAvailable, transferSwitchSensorHysteresis=transferSwitchSensorHysteresis, unitSensorUpperCriticalThreshold=unitSensorUpperCriticalThreshold, wireLabel=wireLabel, outletPowerupSequence=outletPowerupSequence, outletPoleSensorStateChangeDelay=outletPoleSensorStateChangeDelay, transferSwitchSensorMaximum=transferSwitchSensorMaximum, trapInformationEntry=trapInformationEntry, transferSwitchSensorStateChange=transferSwitchSensorStateChange, OutletStateOnStartupEnumeration=OutletStateOnStartupEnumeration, externalSensorTypeDefaultStateChangeDelay=externalSensorTypeDefaultStateChangeDelay, wireSensorUpperWarningThreshold=wireSensorUpperWarningThreshold, unitSensorSignedUpperCriticalThreshold=unitSensorSignedUpperCriticalThreshold, loadShedding=loadShedding, measurementsInletSensorIsAvailable=measurementsInletSensorIsAvailable, logExternalSensorAvgValue=logExternalSensorAvgValue, outletPoleSensorEnabledThresholds=outletPoleSensorEnabledThresholds, inletPoleSensorSignedLowerCriticalThreshold=inletPoleSensorSignedLowerCriticalThreshold, measurements=measurements, externalSensorNumber=externalSensorNumber, overCurrentProtectorSensorConfigurationEntry=overCurrentProtectorSensorConfigurationEntry, outletSensorSignedMinimum=outletSensorSignedMinimum, logOverCurrentProtectorSensorDataAvailable=logOverCurrentProtectorSensorDataAvailable, outletDeviceCapabilities=outletDeviceCapabilities, control=control, relayBehaviorOnPowerLoss=relayBehaviorOnPowerLoss, measurementsInletSensorSignedValue=measurementsInletSensorSignedValue, actuatorState=actuatorState, pduModel=pduModel, reliabilityErrorLogId=reliabilityErrorLogId, overCurrentProtectorSensorSignedMaximum=overCurrentProtectorSensorSignedMaximum, firstNTPServerAddressType=firstNTPServerAddressType, inletId=inletId, serverID=serverID, cascadedDeviceConnected=cascadedDeviceConnected, logOutlet=logOutlet, usbSlaveDisconnected=usbSlaveDisconnected)
